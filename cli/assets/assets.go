// Code generated by go-bindata.
// sources:
// schema/gateway_schema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGateway_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x3c\x0c\xbe\x17\xe8\x7f\x10\xdc\x1e\xdf\x56\xef\x61\xa7\x1c\xb7\xd3\x4e\x1d\xb0\xdd\x86\xa2\x60\x6c\xda\x56\x66\x4b\x9e\xa4\x34\x08\x8a\xfc\xf7\xc1\x9f\xb1\x3c\x49\x76\x16\x3b\x48\x81\xe6\x14\x88\x14\xc9\x87\x7e\x48\x4a\x7a\xbb\xbd\x21\x84\x90\xe0\x5e\x85\x29\xe6\x10\xac\x48\x90\x6a\x5d\xac\x28\xdd\x28\xc1\x1f\xea\xd5\x47\x21\x13\x1a\x49\x88\xf5\xc3\xff\x9f\x68\xbd\x76\x17\xfc\xd7\x6c\xd5\xfb\x02\xcb\x7d\x62\xbd\xc1\x50\x77\xcb\x12\x7f\x6f\x99\xc4\x28\x58\x91\x9f\xf5\x52\xb5\x9c\x83\x4a\x33\xc6\x93\x97\x57\x94\x8a\x09\xde\xea\x57\xc2\x04\x34\xee\x60\x1f\xd4\x4b\xcf\xad\xa9\x42\x8a\x02\xa5\x66\xa8\x82\x15\x79\xf3\x19\x33\xc4\x46\x74\x4a\x4b\xc6\x93\xe0\x28\x3d\xd8\x1c\xbb\xf7\x9b\xe8\x3a\xb1\x1d\x65\x27\xe6\x90\xe3\x70\x4f\x25\xb0\xa0\xef\x64\xa1\xe0\x31\x4b\xb6\x12\x34\x13\x5c\x59\x55\xb4\x64\x49\x82\xd2\x2e\xc4\x57\xe4\xfa\x25\x05\x1e\x65\x7e\x95\x8c\xf1\x5f\x2a\x30\xc5\xcf\x43\x84\xae\xe4\x9b\x18\xad\x22\xe2\xfd\x00\xed\xef\xe0\xcb\xcf\xdc\x76\x23\xa6\x8a\x0c\xf6\x2f\x8b\x04\xdd\x1a\x67\x39\x24\x0b\x58\x47\x15\x4a\x56\xe8\x25\xd2\x32\xa0\x9c\xdb\x3c\xd3\x98\x7b\xe4\x95\xce\xbd\xc4\xb8\x0c\xe1\x8e\x46\x18\x33\xce\x2a\x9b\xd4\x70\x61\x89\xcb\x15\x9b\x81\x0a\xa4\xec\xda\xc3\x28\xa8\x41\x1d\x2c\x01\xca\x70\x71\x41\x50\x75\xe5\x2e\x87\xa8\xb4\x7f\x11\x38\x5d\x23\x5b\x02\x4b\x63\x7c\x76\x20\xe6\xd2\xd0\x4e\x00\x51\x54\x05\x00\xd9\xb7\x7e\xef\x8c\x21\x53\xd8\x9b\x3f\xf5\xdf\x76\x77\xd0\x0b\x7c\x30\xe5\xcc\xca\xb9\xd8\x88\xaa\xcc\xda\x04\x0a\xb5\x66\x3c\xb9\xd2\xc9\xd1\xec\x7a\x3f\xbd\xb7\x4b\xe7\xb8\x61\xfb\x17\xee\xd4\x1c\xc4\xf3\x15\xce\x68\xc8\xe4\x6f\xc2\x5b\x96\xfe\xb5\x06\xfa\x67\xb0\xb6\x5a\x3f\x08\x4e\x6c\xf9\x19\xee\xfa\x20\xf8\x7b\x23\xb8\x79\x58\x58\x84\xe6\x23\x84\x15\x1c\x9f\x62\xfb\x7e\xd7\x97\xf1\x7b\xed\xa9\xc5\x28\x91\x87\xc3\x10\xba\x50\xa6\x71\xe5\xcc\x28\x8e\x33\xf4\x84\x30\xae\xb2\xc8\x97\xac\xc7\x02\x24\xf8\x4e\x54\xd7\x58\x8d\x36\x1c\x47\xce\xcd\x9f\xfd\x8e\x47\x67\x67\x69\x2a\x75\x41\x83\xcb\x46\xa5\xc0\x22\xaf\xb8\x3c\x00\x3b\x38\xef\x8a\x6c\x8c\xd9\x66\x6c\x5e\x15\x62\x49\x88\x5b\xdb\x75\xf2\x26\x0d\xce\xe9\xae\xbc\x3c\x1a\x75\x55\x5f\x1a\x4e\xf4\xe5\x31\x48\x1a\xee\xc0\x36\xd3\xed\x4b\x9a\x5a\x51\x9a\x30\x9d\x6e\xd7\x8f\xa1\xc8\xe9\x8f\xaf\x9f\xbf\x3c\x7d\x17\xb1\xde\x81\x44\x1a\x67\x22\x11\x0f\xa1\xe0\x5a\xb2\x35\x5d\x67\x62\x4d\x73\x50\x1a\x25\x85\xb0\x64\x5f\xa9\xb0\xeb\x5d\x69\x9a\xb7\xb7\xc7\x8d\x72\x76\x38\x62\x2f\x20\x5f\x2e\x26\xce\x32\x87\xf5\xf9\x26\x63\x75\xe9\x9c\x7b\x2c\x7a\x5f\xca\x22\xa6\x0a\xd0\x61\x8a\xe7\x1f\xf5\x26\x5c\x64\xcd\x7b\xa5\xeb\x63\x4c\xb9\xee\xce\xda\x46\x7b\x49\xb8\x64\xec\xfe\xb6\x49\xa6\xb7\xce\x4a\xd5\xff\x04\x43\x3c\x6d\x90\x9c\xd2\x0a\x2b\x65\x36\xa1\x6b\x90\x93\xba\x14\x19\xe9\x54\xa4\x0f\x71\x09\xdf\xa7\xf7\x92\xc5\xfa\x42\xfd\xf7\x70\x7b\x73\xb8\xbd\xf9\x13\x00\x00\xff\xff\x3e\xdf\x44\xcd\x9e\x18\x00\x00")

func schemaGateway_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaGateway_schemaJson,
		"schema/gateway_schema.json",
	)
}

func schemaGateway_schemaJson() (*asset, error) {
	bytes, err := schemaGateway_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/gateway_schema.json", size: 6302, mode: os.FileMode(438), modTime: time.Unix(1505382441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/gateway_schema.json": schemaGateway_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"gateway_schema.json": &bintree{schemaGateway_schemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

