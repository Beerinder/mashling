{
  "mashling_schema": "1.0",
  "gateway": {
    "name": "PolicyExample",
    "version": "1.0.0",
    "description": "This is a simple proxy.",
    "triggers": [
      {
        "name": "MyProxy",
        "description": "Animals rest trigger - PUT animal details",
        "type": "github.com/TIBCOSoftware/mashling/ext/flogo/trigger/gorillamuxtrigger",
        "settings": {
          "port": "9096"
        },
        "handlers": [
          {
            "dispatch": "Pets",
            "settings": {
              "autoIdReply": "false",
              "method": "GET",
              "path": "/pets/{petId}",
              "useReplyHandler": "false"
            }
          }
        ]
      }
    ],
    "dispatches": [
      {
        "name": "Pets",
        "policies": {
          "beforeDispatch": [
            {
              "policy": "Splunk"
            }
          ],
          "afterDispatch": [
            {
              "policy": "Splunk"
            }
          ]
        },
        "routes": [
          {
            "if": "payload.pathParams.petId >= 8 && payload.pathParams.petId <= 15",
            "policies": {
              "beforeRoute": [
                {
                  "policy": "GlobalRateLimiter",
                  "input": {
                    "key": "${payload.ipAddress}"
                  }
                },
                {
                  "policy": "CircuitBreaker"
                }
              ],
              "beforeStep": [
                {
                  "policy": "Splunk"
                }
              ],
              "afterStep": [
                {
                  "policy": "Splunk"
                }
              ],
              "beforeResponse": [
                {
                  "policy": "Splunk"
                }
              ],
              "afterResponse": [
                {
                  "policy": "Splunk"
                }
              ],
              "beforeInterrupt": [
                {
                  "policy": "Splunk"
                }
              ],
              "afterInterrupt": [
                {
                  "policy": "Splunk"
                }
              ],
              "afterRoute": [
                {
                  "if": "PetStorePets.response.error == true",
                  "policy": "CircuitBreaker",
                  "input": {
                    "failed": true
                  }
                }
              ]
            },
            "steps": [
              {
                "service": "PetStorePets",
                "input": {
                  "method": "GET",
                  "pathParams.id": "${payload.pathParams.petId}"
                },
                "interrupt": "PetStorePets.response.error == true"
              },
              {
                "if": "JSON.parse(PetStorePets.response.body).status == 'available'",
                "policies": {
                  "beforeStep": [
                    {
                      "policy": "OneOffPolicyInvocationForJustThisStep"
                    }
                  ]
                },
                "service": "PetStoreInventory",
                "input": {
                  "method": "GET"
                }
              }
            ],
            "interrupts": [
              {
                "if": "PetStorePets.response.error == true",
                "service": "RemoteErrorNotification",
                "input": {
                  "body.message": "${PetStorePets.response.errorMessage}"
                }
              }
            ],
            "responses": [
              {
                "if": "payload.pathParams.petId == 13",
                "error": true,
                "output": {
                  "code": 404,
                  "format": "json",
                  "body": "petId is invalid"
                }
              },
              {
                "if": "JSON.parse(PetStorePets.response.body).status != 'available'",
                "error": true,
                "output": {
                  "code": 403,
                  "format": "json",
                  "body": "Pet is unavailable."
                }
              },
              {
                "if": "JSON.parse(PetStorePets.response.body).status == 'available'",
                "error": false,
                "output": {
                  "code": 200,
                  "format": "json",
                  "body.pet": "${PetStorePets.response.body}",
                  "body.inventory": "${PetStoreInventory.response.body}"
                }
              }
            ]
          }
        ]
      }
    ],
    "services": [
      {
        "name": "PetStorePets",
        "description": "Make calls to find pets",
        "type": "http",
        "settings": {
          "url": "http://petstore.swagger.io/v2/pet/:id"
        }
      },
      {
        "name": "PetStoreInventory",
        "description": "Get pet store inventory.",
        "type": "http",
        "settings": {
          "url": "http://petstore.swagger.io/v2/store/inventory"
        }
      },
      {
        "name": "RemoteErrorNotification",
        "description": "Send error details somewhere custom.",
        "type": "http",
        "settings": {
          "method": "POST",
          "url": "http://www.errorsarebad.io/report_error"
        }
      }
    ],
    "policies": [
      {
        "name": "GlobalRateLimiter",
        "description": "Rate limit all requests",
        "type": "rateLimiter",
        "settings": {
          "perSecond": 100
        }
      },
      {
        "name": "CircuitBreaker",
        "description": "Stop hitting broken routes.",
        "type": "circuitBreaker",
        "settings": {
          "maxFails": 5
        }
      },
      {
        "name": "Splunk",
        "description": "Send my information to Splunk.",
        "type": "splunk",
        "settings": {
          "format": "${time} - ${error} - ${message}"
        }
      }
    ]
  }
}
