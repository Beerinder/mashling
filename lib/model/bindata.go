// Code generated by go-bindata.
// sources:
// lib/model/data/manifest
// DO NOT EDIT!

package model

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libModelDataManifest = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x9a\xcd\x72\xe3\xb8\x11\x80\xcf\xf6\x53\x6c\xf9\xbc\x1e\xe2\x1f\xe8\x39\x26\x97\xe4\x92\xa4\x6a\x73\x4b\xe5\xd0\xdd\x68\x50\xdc\x95\x48\x86\xa4\x66\xec\xdd\xda\x77\x4f\x49\x9a\x19\xcb\xb3\xd4\x98\xb2\x5c\x6b\xcf\x45\x7f\x76\x43\xdf\xd7\x24\x80\x06\x84\xdf\xae\xaf\x6e\x3e\xc8\x30\x36\x5d\x7b\xf3\xfe\x07\xf5\xe3\xf5\xd5\x4d\x96\x5e\xda\x2c\x2d\x37\x32\xde\xbc\xff\xe1\x3f\xd7\x57\x57\xbf\x5d\x5f\x5d\x5d\xdd\x34\x9b\xbe\x1b\xa6\x1e\xa7\xd5\xcd\xfb\x1f\x6e\xea\x66\x5a\x6d\xe9\x1d\x77\x9b\xea\x1f\x5d\x96\x7f\x0d\xcd\x46\xaa\x9f\xc7\xae\xdd\xff\xc3\x8f\xfb\x88\x41\xfa\x6e\x6c\xa6\x6e\xb8\xdf\x45\xac\xa6\xa9\x1f\xdf\x57\xd5\xb2\xc8\x0f\xcd\x27\xa8\x9b\xe4\x9c\xb2\x59\xb2\x77\xce\x9a\xc4\x00\x24\xd6\x45\x13\x4d\x0c\x21\xea\x08\x22\xc5\x58\x04\xfd\x29\x94\x06\x6c\x79\x8f\xb8\xc1\x71\x92\xe1\xe6\xfa\xea\xea\xf7\x1f\x9f\xb6\xf8\x69\xd5\xf5\x4d\xb9\xaf\x46\x1c\x70\x83\x4b\x0d\x4e\x44\x3d\xd0\x93\x55\x3e\xba\x64\x94\xc2\x60\x21\xb0\x75\x94\xa0\x88\xcf\xc8\x1c\x43\x62\xd2\x18\x05\x03\x5c\x4a\xdf\x0c\xdb\x7e\x94\xb6\x5a\x77\xf5\xb0\x1d\x17\xe3\x9f\x08\x3b\xca\x3e\x44\x67\x50\x0a\x3a\x32\x2a\x64\x2e\x4e\xa9\x08\xa6\x58\xca\xd6\x93\x77\x06\x20\x09\x59\xba\x90\xff\xdf\x7f\xff\xcb\x5f\xff\xf9\x53\x57\xa6\x8f\x38\x48\x55\xd6\x5d\xdd\xdd\xf2\xba\xa9\xa4\xfd\xb0\xd4\xe5\x44\x13\x33\x4e\xca\x3a\x9b\x5c\x26\x55\x3c\x73\xa1\x20\x6c\x35\x39\xed\x2c\x17\x34\xa2\x3d\x21\xba\xc8\x98\x4f\x39\x1d\x3e\xfe\x6c\xb1\x67\xbc\x50\x73\x3b\x35\xeb\x37\xef\xb9\x87\xbc\x44\xb4\x6b\xa7\xa1\xa1\x0a\x79\x6a\xba\x76\xf7\xe1\xc7\x8b\x9c\x0f\xcd\xcd\x78\x1b\x9f\x25\x68\xb0\xc6\x49\x89\xcc\x50\xbc\xb2\xb1\xf8\x4c\xc5\x66\x15\x98\x04\x24\xda\x42\x61\xa1\xf7\x31\xef\x0b\xe9\x7f\x68\xa6\xfb\x5d\x9f\xfb\x6e\xfc\xbf\x00\xbf\x64\x02\x06\xe9\xd7\xf7\xdf\x57\x0a\x0e\xc8\x2f\x9b\x84\x71\xfa\xde\x72\x30\x4e\x2f\x91\x82\x4d\x97\x65\x5d\x8d\xcd\xa6\x5f\xcb\x77\x91\x81\x47\xc0\x2f\x90\x80\x69\x68\xea\x5a\x86\x7d\x42\x2b\xee\x86\xc5\xd3\xf6\xab\x66\xe1\x8f\xd4\x17\xa4\x62\x7d\x44\xfc\x0c\xe9\xf5\xac\x70\xb6\xc1\x44\xa3\x72\xd0\x36\xeb\x50\x82\x2d\x41\xcc\x6e\xfe\x8b\x05\x93\x47\xe7\x90\x39\x81\x7b\xd9\x9a\x65\x83\xe3\x6a\xdd\xb4\x75\x25\x77\xd3\x81\xee\x4b\xa6\xea\x6e\x68\xd6\x6b\xdc\x6c\xef\x3e\x7d\xf2\x3c\xe5\xcf\xdf\x30\x63\xec\xa3\xc1\xa4\x82\xf3\x21\xd9\xa8\x81\x53\x70\xbe\x40\x11\x85\x2a\x89\x61\x04\x42\x1f\x7d\x70\x4b\x2b\x9a\x05\x0a\x97\x25\x69\xdd\x50\xc5\x5d\x9b\x9b\xdd\xd4\xfa\xcc\xfb\xfe\xcf\xcb\xc7\x57\xb4\x97\xab\x3f\xbf\xde\xfb\x73\xa5\xcf\x29\xf9\xb0\x47\x5e\x49\x35\xad\x86\xa6\x4c\xfb\xe8\xdd\xfd\xb3\x7f\xb7\x54\xf5\x51\x13\x33\x86\x16\xac\x56\x19\x73\x04\xcb\x18\x80\x1c\x45\xa3\x23\x5a\xda\xad\x0d\x95\x84\x64\xc4\x8b\xc1\x73\x0c\x1f\x18\x17\x6a\x66\xfc\x20\x5c\xaf\xaa\xba\xbb\x1d\x7b\xf9\x58\xed\x1e\x96\xfa\x7d\x15\x3b\x63\x28\x9c\x05\x89\x83\x77\xe0\x73\x31\x59\x18\x7c\x8e\xec\xd0\xb1\x15\x65\x34\x28\xab\xac\x17\xbf\xd0\x70\xff\x2d\x0b\xc5\xe4\x53\xf6\xeb\xee\x76\x90\xb1\x59\x37\xd2\xf2\x7d\x45\x83\xe0\x2f\xcb\x47\xac\xd9\x46\xe6\x96\xc5\xba\x48\xb2\xe4\x49\xd9\x12\x8c\x73\x5e\x25\x63\x29\x7a\x4d\x21\x18\xe3\xa1\x14\x0e\x58\xa2\x5a\xe8\xf9\x99\xf2\x7c\xd5\x3b\x19\x1a\x5c\xdf\x8e\x2d\xf6\xfd\xe2\x5a\xf4\xc9\xf8\x23\x51\x02\xef\x45\x69\x02\xeb\x02\xb2\x86\xcc\x06\x84\x74\xf0\x29\x30\xa8\x2c\x19\x00\x21\xf1\x85\x73\xd1\x67\xa2\xff\x6d\x65\xbb\xb8\x98\x9a\x0f\x7a\x60\x77\x8e\x39\x29\xcf\x45\x5b\xa3\x3c\x79\x5f\x02\x88\x76\xc4\x14\x20\x85\x98\x35\x0a\x98\x02\xe9\x42\xf6\xdd\x3c\xde\xd5\x65\x33\x55\x87\xa7\xa5\xf8\x27\xe3\x8e\x07\x0c\x85\x14\xc1\x7a\x11\x93\x84\x03\x99\x14\x6c\x70\x44\x08\xe4\x72\x0e\x4e\x2b\x26\x9b\x4f\x76\xa7\xc5\x06\x75\x57\xf5\x43\x37\x75\xb4\x2d\x55\xd3\x2d\x37\x38\x8a\x9b\xc1\xd7\x3a\x26\x30\x54\x74\x0a\xa1\x10\xa2\xb1\x3a\xb1\xb2\xe2\x95\x38\xe5\x83\xe3\x94\x9c\x77\x3e\x2e\xec\x25\x4d\xf7\x3c\xa1\xfd\x8b\x37\xea\x74\x60\x5b\xac\xb5\xc6\xb6\x7e\xb6\xd8\xa3\xe0\x39\xb5\xe0\x6c\x48\x56\x34\x79\x87\x20\x29\x61\x36\x21\x43\x2a\x49\x3b\xa5\x38\x31\x64\x28\xae\x9c\xdc\xeb\x7b\x71\x35\xbe\xad\xa5\xbd\xad\xbb\x2a\xcb\xc8\x43\xd3\x4f\xdd\xe2\x81\xfc\x75\x6c\xe7\x80\x9f\x9b\x80\xe9\xbe\x97\xc5\x95\xe5\x9f\xaf\x7b\xc0\xbb\x48\xae\x9a\x9a\x8d\x8c\x13\x6e\xfa\x37\xae\x79\x04\x7a\x9e\xf0\x79\xd3\xf2\x7c\xd0\x51\x81\xec\x2d\x06\xa7\x5d\x54\x0e\x02\x19\x6b\x22\x12\x23\x6b\x45\x36\x58\x08\x94\x21\x89\xf3\x7c\xe9\x5e\xfc\xa7\xb5\x52\xb5\xd9\xde\x2d\x27\xff\x63\xc8\x03\x77\x2c\x2a\x25\xa5\x93\x07\x6d\xa1\xa4\x90\x0b\x96\xac\xd9\x40\x10\xc3\x84\x80\x49\x65\x03\x46\x2e\xe4\xfe\x19\xfb\x1d\xc9\x4f\xfb\x8e\xb7\x94\x7c\x3e\xe8\x81\x9d\x11\x09\x94\x76\x9e\x94\xb7\x31\x78\x1b\x88\x90\xac\x35\x56\x9b\xe2\x92\x36\xda\x58\xd1\x70\x72\xb8\x5f\xca\xbe\xdd\x95\x9a\x23\xaf\x36\x4d\x9e\xaa\x1d\xe7\xd0\x6d\xa7\xe5\x75\xeb\x93\xf1\x47\x25\xba\x26\x48\x26\x11\x83\x78\x50\x8e\x50\x58\xf9\x88\xda\x3b\x56\xc0\xe8\x54\x91\x58\x50\x4e\x96\xae\x0b\x8d\xd6\x4d\xbd\x9a\xc6\x49\xfa\x87\x57\xb7\xd3\x80\x2c\xc3\x6d\xbd\x78\xce\x5a\xd6\xc8\xd1\x2f\x06\xa4\x95\x4a\x59\x27\x50\xca\x3a\x1b\x85\x03\x06\xed\x4a\x42\xce\x6c\x48\xf9\x44\x28\x2a\x96\x0b\xdd\xba\x5e\xda\x1d\x46\xd3\xd6\x5f\x36\xc3\xea\xee\xb6\xa3\x51\x86\x0f\xcb\x2f\xda\xd2\x66\x1e\xfc\xd0\x9b\x62\xac\x33\xce\x81\x71\x21\x7b\x62\x36\xd1\x4a\xf0\x4c\x99\x0b\xfa\x12\x73\xe0\x60\x2f\xad\xc6\x8f\xc0\x2a\xc2\xb1\xe1\xb3\x2f\xdc\x82\x16\x8e\xc6\x6c\xb2\x06\x8b\x51\x51\x6b\x40\xed\x48\x93\xb1\x3a\x3b\xaf\x73\xb1\x92\x95\xc3\x68\xa4\x08\xbd\xe0\x55\x7b\x94\xfa\xe7\x59\x9d\x68\xe1\xc8\xca\x06\x4d\xc0\x39\x28\x92\x08\xec\xd8\x62\x2c\x08\xc9\x69\xb2\xac\xad\x11\xa7\x54\x08\x78\xe9\xc8\xb1\xe3\xf8\xb5\xe9\x7f\x69\xda\xea\xf0\x74\xbb\xbb\x85\x1e\xe0\xce\x71\x5b\xd4\xce\xa3\xbb\x31\x8a\x4e\x90\xb4\x52\x21\x82\x24\x97\x25\x3a\xcc\x2e\x06\x96\xa4\x73\xc1\xb0\xef\x75\x17\x1a\xf6\x8d\x0c\x83\x70\xb5\xfe\xd5\x2d\x95\x99\x0b\x39\x1a\x25\x12\x9b\x08\x16\x72\xd1\x94\xc1\x4b\x4a\x5a\x0c\x1b\x1b\x22\x46\x07\x10\x1c\x66\x5d\x58\x2e\xdd\x5f\xfd\x0c\x71\x77\xf7\x37\x1c\x57\x9f\x9e\xac\x39\xd7\xe1\x10\x37\x97\x7e\xa5\x54\x20\x6d\x39\x1a\x53\x62\xd1\xc6\x86\xc4\x4a\xa1\xcd\x96\x0d\x4a\x42\x00\x40\xc5\x4b\xf7\xc5\xbf\xf0\x2d\xd5\xfb\xa5\xae\x64\x18\xce\xd8\xf6\x9f\x89\x78\xb0\x29\xda\x33\x44\x95\xc5\x53\x0c\x05\x59\x91\x07\x24\xb2\x26\x07\xc3\x3a\x32\x47\x92\x6c\xc2\xa5\x4b\xdd\x81\x87\xee\xe3\x5a\xee\x77\x03\xed\x46\xa6\xa1\xe1\xc5\xf8\xdf\x0a\x3d\xea\xf6\xc5\xaa\x22\xa0\xc0\xa1\xd7\x96\xc5\x71\x54\x8a\x00\xbd\x73\x3e\x11\x91\x62\x08\x00\xe1\x79\x43\xf4\xbe\x40\x7c\xd7\x0d\x75\x75\x57\xf1\x70\xdf\x4f\x5d\x35\x8e\xab\x6a\x92\x61\xd3\xb4\xf8\xc4\x96\x6c\xf7\xae\xee\xba\x7a\x2d\x63\xb7\x1d\x58\xf6\x4a\x87\x36\x66\x2c\x42\x8a\xd9\x51\xd2\xc9\x3b\x2f\xce\x59\x4e\x84\xc6\x58\x26\x29\x46\x91\x8e\x46\x63\xc9\x2e\x9f\xec\x22\x5f\xef\xe3\x1d\x43\x2e\x36\x6c\x65\xaa\x76\xf3\xa2\xdc\x3d\x51\xce\xcd\x98\xb5\x32\x57\xcd\x29\xcd\x1a\x94\x51\xa1\x50\x2e\x05\x9d\x29\xd6\xba\xe2\xc8\x50\x31\xc6\xa8\xe2\x95\x04\x07\x66\xe9\xb6\xdd\x67\xb8\xb3\x8c\x76\xd4\x4f\x0c\x02\xaf\xe5\x73\x40\x3b\xcb\xa6\xc9\xed\x13\x87\x8d\x5e\x4b\x66\x4f\x76\x9e\x4b\x3b\xc9\xd0\xe2\xfa\xb0\xdc\x93\xa1\x79\x6a\xfd\xfd\x6a\x6a\x33\xa0\x67\x99\xae\xe5\x6e\x7f\xb1\xd7\xf2\xc4\x12\xef\xb5\x0c\x8f\x01\xcf\x32\xdb\xd7\x99\x6f\xd3\xe9\x80\xb6\xd8\x66\xbc\x1f\xab\x6d\xdb\x9c\x7f\x81\xc6\xfb\xb9\x79\x29\x3b\x13\x02\xb1\x36\x88\xa2\xc8\x69\x93\xc0\x1b\x4e\x09\x28\x06\x70\xce\x14\x16\x9f\x4d\x39\x79\x0c\xf1\x2b\x99\x3d\xd9\x62\x97\xdd\x28\x59\x8d\xc2\xdb\x41\x2a\x6a\x72\x33\x6c\x9f\x3a\x32\x31\xe3\xf5\x68\x1e\x38\x3a\xe1\x97\x4a\xf0\xa1\x60\xb1\xc5\xc6\x12\x40\xe5\xa2\xd1\x1a\xaf\x3d\xb9\x08\x4e\x7b\xd1\x18\xe2\xe9\x13\x8a\x5f\x4f\x55\x5f\x51\x9e\xe7\x38\x0d\xd8\x8e\xa5\x1b\x36\x6f\xd4\xee\x81\xef\x3c\xaf\x6d\xdb\x70\x97\x0f\x69\x79\xa3\x6a\x8f\x10\x9f\x67\xd7\xbe\xdd\x0b\xf7\x08\xf1\xdb\x76\x3b\xbe\x77\x47\x92\xb5\xb4\xfb\x0d\xd3\xea\xf0\x27\xec\x9b\xb1\xc2\xbe\xa9\xb0\x6d\xbb\x09\xcf\x3a\xc0\x70\x68\x61\x57\x00\x7f\x6e\x74\xf6\x17\x12\x8e\x05\xc4\xbb\x98\x31\x64\x4a\x31\x98\xa0\x58\x1c\x08\x46\x6f\x03\x24\x0f\xca\x31\x2c\xad\x1d\xbf\x41\x7d\x79\x1e\x86\x9e\xab\x71\xc2\x69\xf9\x91\xe3\x57\x4e\xc1\x11\xf0\x99\xf6\x43\xcf\x8b\x1d\x77\xdf\xb2\x7b\x98\xdf\xd9\x48\xc1\x2b\x6d\x89\x75\xa4\xe8\x8b\x0e\x49\x7b\xf0\xce\xe8\x48\x86\x39\xc5\xac\xa4\x58\x8c\xa7\xe7\xc5\x6f\x81\x1f\x3a\x56\x3d\x60\xbf\x3a\x4c\x66\x0f\xef\x2b\xec\xfb\x7c\xbc\x14\x7e\xc2\xe2\x5b\xa1\x47\xeb\x4e\x40\x67\x6d\x60\x65\xbc\x33\x42\x54\x50\x69\xb6\x11\x1c\x50\x8e\xda\x9b\x42\xaa\x04\x0f\xdf\x5c\xaf\x5d\x5f\xfd\xf7\xfa\xf7\xeb\xff\x07\x00\x00\xff\xff\x3a\x0d\x1c\x8d\x8d\x30\x00\x00")

func libModelDataManifestBytes() ([]byte, error) {
	return bindataRead(
		_libModelDataManifest,
		"lib/model/data/manifest",
	)
}

func libModelDataManifest() (*asset, error) {
	bytes, err := libModelDataManifestBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/model/data/manifest", size: 12429, mode: os.FileMode(436), modTime: time.Unix(1510009877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/model/data/manifest": libModelDataManifest,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"model": &bintree{nil, map[string]*bintree{
			"data": &bintree{nil, map[string]*bintree{
				"manifest": &bintree{libModelDataManifest, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

