// Code generated by go-bindata.
// sources:
// vendor/github.com/TIBCOSoftware/flogo-contrib/action/flow/action.json
// DO NOT EDIT!

package actions

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vendorGithubComTibcosoftwareFlogoContribActionFlowActionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\x45\xe7\xfc\x51\xfe\xab\x6f\x6d\xa1\xe0\x53\xa1\x6e\x4f\xa5\x14\xd9\x59\xdb\x0b\xb6\x56\xac\xd6\x0d\x21\xe4\xdd\x8b\x15\xa7\x35\xb8\x84\x5e\x74\x98\xd1\x37\x33\xec\x29\x03\x30\xde\x0d\x68\x72\x30\x4d\xcf\x07\xb3\x99\x14\x3d\x86\xab\xd2\x72\xee\x6a\x25\xf6\x17\x47\xb0\x99\x8c\x96\xb4\x1b\xab\x6d\xcd\x83\x7d\x29\xee\x1f\x9e\x4a\x6e\xf4\xe0\x04\x6d\x22\xfe\xd5\xec\x55\xa8\xb2\x17\xd2\xfe\x04\x7f\xa2\xc4\x29\x2b\x07\xb3\xdb\xee\xb6\xff\xe7\x3a\xd2\x3e\xf5\x95\x34\x84\x1e\xe1\xf1\xfb\xff\x1e\x63\x2d\x14\x74\x66\x16\x3e\xdc\x2d\x56\x75\x3c\x60\x70\x6d\xca\xe8\x54\x43\xcc\xad\xfd\xe3\x44\x15\x44\x3b\xb8\xa8\x28\xeb\xb9\x32\xfa\x0f\x4e\xed\xd1\xe4\x6f\x19\x00\xc0\x29\xbd\x8b\xab\x71\x48\x7f\x93\x76\xbd\x1b\x79\x35\x49\x3b\x6f\x7e\x87\xa6\x8a\xd7\xe7\x62\x4d\x46\x15\xf2\xed\x6d\x58\x50\x47\xf1\xc5\x7e\x4d\x57\xcc\x3d\x3a\x7f\x1b\x27\x4f\x4a\xae\x2f\xd5\x29\xae\x23\x9c\x3f\xce\x78\x06\xf0\x9e\x9d\xb3\xaf\x00\x00\x00\xff\xff\xce\x1c\xdd\x25\x23\x02\x00\x00")

func vendorGithubComTibcosoftwareFlogoContribActionFlowActionJsonBytes() ([]byte, error) {
	return bindataRead(
		_vendorGithubComTibcosoftwareFlogoContribActionFlowActionJson,
		"vendor/github.com/TIBCOSoftware/flogo-contrib/action/flow/action.json",
	)
}

func vendorGithubComTibcosoftwareFlogoContribActionFlowActionJson() (*asset, error) {
	bytes, err := vendorGithubComTibcosoftwareFlogoContribActionFlowActionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vendor/github.com/TIBCOSoftware/flogo-contrib/action/flow/action.json", size: 547, mode: os.FileMode(420), modTime: time.Unix(1521667072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vendor/github.com/TIBCOSoftware/flogo-contrib/action/flow/action.json": vendorGithubComTibcosoftwareFlogoContribActionFlowActionJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vendor": &bintree{nil, map[string]*bintree{
		"github.com": &bintree{nil, map[string]*bintree{
			"TIBCOSoftware": &bintree{nil, map[string]*bintree{
				"flogo-contrib": &bintree{nil, map[string]*bintree{
					"action": &bintree{nil, map[string]*bintree{
						"flow": &bintree{nil, map[string]*bintree{
							"action.json": &bintree{vendorGithubComTibcosoftwareFlogoContribActionFlowActionJson, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
