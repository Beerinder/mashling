// Code generated by go-bindata.
// sources:
// schema.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

<<<<<<< HEAD
var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x6f\xdb\x3c\x0c\xbe\xf7\x57\x08\xea\x7b\x7a\xb1\x36\x3b\xec\x94\xf3\x80\xee\xb6\xa2\xd9\x6d\x28\x0a\xd5\x66\x1c\x15\x8e\xa4\x49\x4c\x87\x60\xe8\x7f\x1f\xfc\x59\x3b\x96\xfc\x11\xcb\x9d\x03\x38\x87\x1e\x4c\x9a\xa4\xa9\xe7\xa1\x48\xa9\x7f\xae\x08\x21\x84\xfe\x67\x82\x1d\xec\x19\x5d\x13\xba\x43\x54\xeb\xd5\xea\xc5\x48\x71\x93\x3d\xbd\x95\x3a\x5a\x85\x9a\x6d\xf1\xe6\xf3\x97\x55\xf6\xec\x9a\x7e\xca\xdf\xd4\xb0\x4d\x5e\xbb\x5e\x85\xb0\xe5\x82\x23\x97\xc2\xac\x36\x99\xb9\x5c\xa7\x22\xa1\x6b\x92\xb9\x4c\x05\x5f\xb9\x51\x0c\x83\x5d\xed\x69\x2a\xd1\xf0\xeb\xc0\x35\x84\x74\x4d\x7e\xd6\x24\xa9\x54\xb0\x3d\xe4\xc6\xeb\x6f\xc9\x03\x82\xa1\x35\xc1\x63\x5d\x8f\x2a\x2d\x15\x68\xe4\x60\x1a\x5e\xdf\x6d\xdb\x24\xa9\x14\x8f\x2a\x91\x52\x83\x9a\x8b\x88\x36\x94\xde\xdc\x51\x39\x6d\x72\x84\xbd\x5b\x4c\x46\xad\x8f\xdd\x9a\x75\xcd\x1e\x92\x30\x9b\x5f\xe4\xf8\xaa\x5a\x36\x98\xd6\xec\x68\x49\xc6\x55\x8b\x11\xca\xc2\x30\xf5\xcc\xe2\xfb\xea\x92\x6c\x59\x6c\xe0\x44\xb5\xf0\x23\x9f\x5f\x20\xc0\x77\x47\x15\x93\xf4\x8e\x21\xfc\x66\x47\x5f\x50\x7a\x05\x6d\xb8\x14\x36\x11\x6a\x1e\x45\xa0\x8d\x4d\x16\xe6\x88\x1e\x8b\xc2\x10\x4c\xa0\xb9\x4a\xf2\xe3\x17\x8c\x95\x00\xe7\x0e\xc8\xb2\x3a\x78\xc5\xa4\x23\x27\x31\x3b\x3e\xf1\x3d\x8b\x3c\x73\xbf\x30\xed\xbf\xaa\xf8\xb7\xa8\x64\xcc\x03\x17\x22\xc9\x8c\x80\x71\x9f\x04\x6a\x59\x5b\xc7\x87\x91\x33\x61\x61\x40\xbf\xf2\xe0\x02\xf2\xb1\xc9\x02\x9d\x3c\x21\x65\xe1\x9b\x7b\x42\x7e\x64\x81\x4e\x9e\x90\x62\x93\x38\x9f\x86\x1f\xb9\x43\x7e\x63\x22\x8c\x41\x0f\xdd\x21\x43\x6b\x19\x1e\xbc\xa1\xb9\x5a\xbd\xfe\xb9\xb2\x52\x14\x91\x8b\xa8\x05\x91\x8a\x21\x82\x16\xf7\xed\xe1\x95\xea\xb7\xff\xb7\xca\x49\xcb\xb2\xa0\x3e\x80\x1b\xa9\xd5\x4f\x6c\x26\xb9\xe9\x23\x05\x61\xbb\xb9\x54\xf1\x59\xca\x18\x98\xad\x4f\x69\xa8\x72\x81\x90\xb0\xa2\x87\xaa\x38\xec\x9f\xfb\x6a\xc6\x71\x1f\xbd\x1c\x98\x3d\x34\x5d\xeb\x5f\xfd\x3d\x3a\xa5\x6f\x67\x71\xfe\x94\x36\x76\x6b\x13\xf3\xf3\xfb\x01\xd5\x01\x07\xd3\x93\x21\x1b\x47\xcd\x40\x86\x3d\x3a\x89\x02\x3d\xfd\xda\x9e\x24\x28\xa7\xc9\xc1\x04\xea\x26\x4e\x27\x61\x7a\x10\xa5\x07\x41\xba\x89\xd1\x45\x88\x6e\x22\xb4\x12\xa0\x09\xfc\x0f\x85\x68\xde\x79\x79\x9a\xb1\x52\x8f\xf3\x1c\x93\xfc\x77\xd7\xcb\x56\xb5\x6c\x55\xf5\x9f\xe7\xad\xca\x45\xb0\xcb\x68\x4e\x1f\xc0\x28\x29\x4c\x33\xdc\x8e\xda\x02\x5a\x4b\x3d\xae\x88\x64\x26\x3a\xd3\x54\xc0\xb7\x57\xe6\xf9\xd6\x6f\xf5\x90\xf6\xde\xa0\x94\x7b\x9b\xaa\x1c\x13\x55\xde\x9b\xfc\x63\x8c\xa4\x27\x94\x03\x01\x62\x10\xd4\xc8\xc3\x38\x66\x8e\x22\x98\x39\x40\xbc\x1c\xde\x74\x39\x76\x38\x27\x67\x8e\xcf\x3a\xe7\xfc\xfc\x0f\x14\xca\xea\x34\x75\x4a\x32\xb4\xce\x3d\x1d\x1b\x04\x75\xb9\x37\x05\x9b\x22\x41\x83\xea\xc8\x9e\x99\x5d\xcc\x45\xf4\x64\xaa\x77\x5b\x35\x95\x28\xbf\x82\x18\x55\x6c\x22\xc7\x3d\x46\xa9\x30\x75\xa9\xbf\xb3\x7d\x05\x71\xe0\xf5\x34\x2b\x97\xd1\x6c\x14\x07\xa6\xcb\x1c\xb3\xcc\x31\xef\x3e\x96\x39\xa6\x4d\x69\x99\x63\xfa\x95\x96\x64\x6b\x1c\xda\xa2\xda\xee\x6f\x86\x96\x10\xdf\x0d\x25\x17\xad\x03\xc7\x42\xf2\x52\x75\x21\x79\xc3\xd7\x39\x24\x37\x8e\x4d\xb9\x61\x74\x16\x3c\x2f\xae\x18\x7d\xb6\x10\x96\xe7\xbb\xec\xce\x6e\xae\xff\x4d\x52\x86\x37\xf7\x89\xa5\xb8\xfb\x9c\x7a\x7e\x5b\xfa\xad\xa5\x14\x5f\x7e\x29\x9e\x7b\xbf\x75\x95\xfd\x7d\xfb\x1b\x00\x00\xff\xff\x38\xd1\xc2\x9a\xbe\x2a\x00\x00")
=======
var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xc1\x6e\xdb\x3c\x0c\xbe\xf7\x29\x04\xf5\x3f\xfd\x58\x9b\x1d\x76\xca\x79\x40\x77\x2c\x9a\xdd\x86\xa2\x50\x6d\xc6\x51\x61\x4b\x9a\xa4\x74\x0b\x86\xbe\xfb\x60\xcb\x76\xed\x5a\x72\xec\x44\x1e\x14\x40\x3a\xe4\x20\xd2\x24\x45\x91\x1f\x29\x29\x7f\xae\x10\x42\x08\xff\xa7\x92\x1d\x14\x04\xaf\x11\xde\x69\x2d\xd6\xab\xd5\x8b\xe2\xec\xc6\xcc\xde\x72\x99\xad\x52\x49\xb6\xfa\xe6\xf3\x97\x95\x99\xbb\xc6\x9f\xea\x2f\x25\x6c\xcb\xcf\xae\x57\x29\x6c\x29\xa3\x9a\x72\xa6\x56\x1b\x23\xae\xe6\xe9\x50\xf0\x1a\x19\x95\x15\xe1\x2b\x55\x82\xe8\x64\xd7\x9b\xad\x28\x12\x7e\xee\xa9\x84\x14\xaf\xd1\x8f\x1e\xa5\xa2\x32\x52\x40\x2d\xbc\xff\x15\xdf\x6b\x50\xb8\x47\x78\xec\xf3\x61\x21\xb9\x00\xa9\x29\xa8\x81\xd6\x77\xd9\x36\x4a\x45\xd5\x07\x51\x52\xb1\xd2\x92\xb2\x0c\x0f\x98\xde\xdc\x56\x39\x65\x52\x0d\x85\x9b\x8c\xce\xda\x1f\xbb\x34\xeb\x9e\x3d\x94\x66\x0e\x57\xe4\x58\x55\xcf\x1b\x44\x4a\x72\xb0\x38\xe3\x6a\x44\x08\x26\x69\x5a\x69\x26\xf9\x7d\x77\x4b\xb6\x24\x57\xf0\x81\xb5\xd1\xc3\x9f\x5f\x20\xd1\xef\x8a\x3a\x22\xf1\x1d\xd1\xf0\x8b\x1c\x7c\x85\xd2\x2b\x48\x45\x39\xb3\x91\xb4\xa4\x59\x06\x52\xd9\x68\x69\x1d\xd1\xe7\x46\x61\x0a\x2a\x91\x54\x94\xfe\xf1\x1b\x8c\x1d\x03\x43\x0f\xc8\x16\x1d\xbc\xc6\xa4\xc3\x27\x39\x39\x3c\xd1\x82\x64\x9e\x73\xbf\x11\xed\x1f\x55\xfc\x4b\x14\x3c\xa7\x89\x2b\x22\x51\x40\x81\x71\x5f\x1a\x6a\xd9\x5b\xc7\xc2\xd0\x89\x61\xa1\x40\xbe\xd2\xe4\x02\xfc\xb1\x31\x86\x2e\xee\x90\x16\xf8\x42\x77\xc8\x77\x63\xe8\xe2\x0e\x69\x8a\xc4\xe9\x69\xf8\x2f\x2b\xe4\x37\xc2\xd2\x1c\xe4\xdc\x0a\x99\x5a\x61\x78\x76\x41\x73\xb5\x7a\xd3\x7d\x65\x4d\x51\xad\x29\xcb\x46\x22\x52\x10\xad\x41\xb2\xfb\x71\xf3\x5a\xf6\xdb\xff\x47\xe9\x68\x64\x5b\xb4\xdc\x83\x3b\x52\xbb\x4b\x1c\x3a\x79\xa8\xa3\x0a\xc2\x71\x71\x15\xe3\x33\xe7\x39\x10\x5b\x9f\x32\x60\xa5\x4c\x43\x99\x15\x13\x58\xd9\xbe\x78\x9e\xca\x99\xe7\x53\xf8\xea\xc0\x9c\xc0\xe9\xda\xff\xee\x78\x74\x52\xdf\x4e\xca\xf9\x8f\x69\x63\x97\xb6\x70\x7e\xd6\x65\xcd\x53\x03\x5b\x69\x0c\xb3\x07\xf5\xdf\xba\x44\x1c\x88\x38\xd0\x1f\x9e\x71\xc0\x95\x60\x97\x51\xf9\x1f\x40\x09\xce\xd4\xd0\xdc\x23\xd8\x02\x52\x72\x79\x1e\x88\x24\xbc\x10\x39\xfc\x3e\xee\xa8\x26\x80\x27\xf9\xde\x18\xe6\x57\x26\xdd\xfa\xc5\x24\xbe\xd7\x62\xaf\x23\x22\x45\x44\x32\xe3\x82\x3b\x13\x73\x35\x38\x13\x3c\x94\x06\x71\xe6\x2d\x18\x51\x07\x96\x04\x9e\xe6\x5e\x6e\x4d\x8e\x29\x76\x28\x47\x27\x9e\x5b\x65\x5d\x0f\xc2\x3f\xc9\xb7\x95\x6b\x69\x97\x98\x68\x0d\xdd\x1d\x1b\x0d\xe2\x72\xaf\xe8\x37\x8d\x83\x66\xe1\x48\x41\xd4\x2e\xa7\x2c\x7b\x52\xdd\x47\xa5\x1e\x4b\x56\xdf\xfd\x9f\x05\x36\x99\xe3\x01\xa1\x65\xf0\xb6\xc1\x8e\xcd\xbd\xb3\xad\x02\x39\xe2\xf5\xa3\x57\x2e\xa3\x11\x6d\x6e\x2a\xe3\x19\x37\x9e\x71\xdf\x75\xc4\x8e\x72\x8c\x29\x9e\x71\xa7\x41\x4b\x59\x1a\xe7\xb6\xa8\xb6\x87\x93\xb9\x10\xe2\xbb\xa1\xa4\x2c\x1e\x1b\x63\x92\xb7\x63\xf9\x24\x8f\x17\x15\x31\xe2\xba\x63\xf9\x88\x53\x8e\x36\x70\x20\x34\x88\xca\xd2\xbc\x26\xfb\x6c\x5a\x2d\xf3\x3b\xf3\x3c\x1b\xea\x1f\x87\x5a\xf3\x42\x3f\x23\x37\xcf\xdc\x5e\x8f\xc9\xb1\xc3\x77\x2e\x31\x42\xf1\x18\x67\xe8\x50\x1c\x7a\x87\x7f\x65\x7e\xdf\xfe\x06\x00\x00\xff\xff\x42\x3e\x35\x7f\xa9\x2c\x00\x00")
>>>>>>> master

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

<<<<<<< HEAD
	info := bindataFileInfo{name: "schema.json", size: 10942, mode: os.FileMode(420), modTime: time.Unix(1526679096, 0)}
=======
	info := bindataFileInfo{name: "schema.json", size: 11433, mode: os.FileMode(420), modTime: time.Unix(1526677893, 0)}
>>>>>>> master
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
