// Code generated by go-bindata.
// sources:
// schema.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x6f\xdb\x3c\x0c\xbe\xf7\x57\x08\xea\x7b\x7a\xb1\x36\x3b\xec\x94\xf3\x80\xee\xb6\xa2\xd9\x6d\x28\x0a\xd5\x66\x1c\x15\x8e\xa4\x49\x4c\x87\x60\xe8\x7f\x1f\xfc\x59\x3b\x96\xfc\x11\xcb\x9d\x03\x38\x87\x1e\x4c\x9a\xa4\xa9\xe7\xa1\x48\xa9\x7f\xae\x08\x21\x84\xfe\x67\x82\x1d\xec\x19\x5d\x13\xba\x43\x54\xeb\xd5\xea\xc5\x48\x71\x93\x3d\xbd\x95\x3a\x5a\x85\x9a\x6d\xf1\xe6\xf3\x97\x55\xf6\xec\x9a\x7e\xca\xdf\xd4\xb0\x4d\x5e\xbb\x5e\x85\xb0\xe5\x82\x23\x97\xc2\xac\x36\x99\xb9\x5c\xa7\x22\xa1\x6b\x92\xb9\x4c\x05\x5f\xb9\x51\x0c\x83\x5d\xed\x69\x2a\xd1\xf0\xeb\xc0\x35\x84\x74\x4d\x7e\xd6\x24\xa9\x54\xb0\x3d\xe4\xc6\xeb\x6f\xc9\x03\x82\xa1\x35\xc1\x63\x5d\x8f\x2a\x2d\x15\x68\xe4\x60\x1a\x5e\xdf\x6d\xdb\x24\xa9\x14\x8f\x2a\x91\x52\x83\x9a\x8b\x88\x36\x94\xde\xdc\x51\x39\x6d\x72\x84\xbd\x5b\x4c\x46\xad\x8f\xdd\x9a\x75\xcd\x1e\x92\x30\x9b\x5f\xe4\xf8\xaa\x5a\x36\x98\xd6\xec\x68\x49\xc6\x55\x8b\x11\xca\xc2\x30\xf5\xcc\xe2\xfb\xea\x92\x6c\x59\x6c\xe0\x44\xb5\xf0\x23\x9f\x5f\x20\xc0\x77\x47\x15\x93\xf4\x8e\x21\xfc\x66\x47\x5f\x50\x7a\x05\x6d\xb8\x14\x36\x11\x6a\x1e\x45\xa0\x8d\x4d\x16\xe6\x88\x1e\x8b\xc2\x10\x4c\xa0\xb9\x4a\xf2\xe3\x17\x8c\x95\x00\xe7\x0e\xc8\xb2\x3a\x78\xc5\xa4\x23\x27\x31\x3b\x3e\xf1\x3d\x8b\x3c\x73\xbf\x30\xed\xbf\xaa\xf8\xb7\xa8\x64\xcc\x03\x17\x22\xc9\x8c\x80\x71\x9f\x04\x6a\x59\x5b\xc7\x87\x91\x33\x61\x61\x40\xbf\xf2\xe0\x02\xf2\xb1\xc9\x02\x9d\x3c\x21\x65\xe1\x9b\x7b\x42\x7e\x64\x81\x4e\x9e\x90\x62\x93\x38\x9f\x86\x1f\xb9\x43\x7e\x63\x22\x8c\x41\x0f\xdd\x21\x43\x6b\x19\x1e\xbc\xa1\xb9\x5a\xbd\xfe\xb9\xb2\x52\x14\x91\x8b\xa8\x05\x91\x8a\x21\x82\x16\xf7\xed\xe1\x95\xea\xb7\xff\xb7\xca\x49\xcb\xb2\xa0\x3e\x80\x1b\xa9\xd5\x4f\x6c\x26\xb9\xe9\x23\x05\x61\xbb\xb9\x54\xf1\x59\xca\x18\x98\xad\x4f\x69\xa8\x72\x81\x90\xb0\xa2\x87\xaa\x38\xec\x9f\xfb\x6a\xc6\x71\x1f\xbd\x1c\x98\x3d\x34\x5d\xeb\x5f\xfd\x3d\x3a\xa5\x6f\x67\x71\xfe\x94\x36\x76\x6b\x13\xf3\xf3\xfb\x01\xd5\x01\x87\xd2\x33\x90\xa1\xb5\x81\x0d\x19\xb2\x71\x94\x4d\x2d\x77\xd2\xb5\x40\x55\xbf\x76\x28\x09\xca\x69\x72\x30\xb1\xba\x09\xd5\x49\xa4\x1e\x04\xea\x41\x9c\x6e\xc2\x74\x11\xa5\x9b\x20\xad\xc4\x68\x12\xe2\x43\xa1\x9b\x77\x64\x9e\x66\xaf\xd4\xe3\x3c\xc7\x27\xff\x5d\xf7\xb2\x85\x2d\x5b\x58\xfd\xe7\x79\x0b\x73\x11\xec\x32\x9a\xd6\x07\x30\x4a\x0a\xd3\x0c\xb7\xa3\xb6\x80\xd6\x52\x8f\x2b\x22\x99\x89\xce\x34\x15\xf0\xed\x95\x79\xbe\xf5\x5b\x3d\xa4\xbd\x67\x28\xe5\xde\xa6\x2d\xc7\xa4\x95\xf7\x2c\xff\x18\x23\xe9\xc9\xe5\x40\x80\x18\x04\x35\xf2\x90\x8e\x99\xa3\x08\x66\x0e\x10\x2f\x87\x3a\x5d\x8e\x1d\xce\xc9\x99\x63\xb5\xce\x39\x3f\xff\x83\x86\xb2\x3a\x4d\x9d\x92\x0c\xad\x73\x4f\xc7\x06\x41\x5d\xee\x0d\xc2\xa6\x48\xd0\xa0\x3a\xb2\x67\x66\x17\x73\x11\x3d\x99\xea\x9d\x57\x4d\x25\xca\xaf\x26\x46\x15\x9b\xc8\x71\xbf\x51\x2a\x4c\x5d\xea\xef\x6c\x5f\x41\x1c\x78\x3d\xcd\xca\x65\x34\x1b\xc5\x41\xea\x32\xc7\x2c\x73\xcc\xbb\x8f\x65\x8e\x69\x53\x5a\xe6\x98\x7e\xa5\x25\xd9\x1a\x87\xb6\xa8\xb6\x7b\x9d\xa1\x25\xc4\x77\x43\xc9\x45\xeb\xc0\xb1\x90\xbc\x54\x5d\x48\xde\xf0\x75\x0e\xc9\x8d\x63\x53\x6e\x18\x9d\x05\xcf\x8b\xab\x47\x9f\x2d\x84\xe5\xf9\x2e\xbb\xcb\x9b\xeb\x7f\x99\x94\xe1\xcd\x7d\x62\x29\xee\x44\xa7\x9e\xdf\x96\x7e\x6b\x29\xc5\x97\x5f\x8a\xe7\xde\x6f\x5d\x65\x7f\xdf\xfe\x06\x00\x00\xff\xff\x19\x1e\xd6\x37\xd6\x2a\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 10966, mode: os.FileMode(420), modTime: time.Unix(1526658453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
