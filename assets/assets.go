// Code generated by go-bindata.
// sources:
// schema/configurationsSchema.json
// schema/eventhandlersSchema.json
// schema/eventlinksSchema.json
// schema/gateway_schema.json
// schema/mashlingJsonSchema.json
// schema/triggersSchema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaConfigurationsschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x8e\xd4\x30\x0c\xbd\xcf\x57\x58\x39\x03\x45\xdc\xb6\xc7\xdd\x03\xe2\xb4\x48\xc0\x09\x71\x70\x53\xb7\x13\x26\xd3\x14\xc7\xd5\x30\xa0\xfe\x3b\x6a\x2b\x68\x33\x4d\xda\x01\x71\xf5\xf3\xb3\xdf\x8b\xed\xfc\x3c\x00\x00\x28\xed\x9a\xca\xd4\x1d\xa3\x18\xd7\x78\x95\xc3\x14\x1f\x31\xb9\xb6\xa4\x72\x50\xc8\x8c\x57\xf5\x62\x06\x4a\xf2\x9a\x4d\x3b\x50\x06\xfc\x2d\x0a\x5d\xf0\x0a\x4f\x61\xad\x05\xc1\x08\x9d\xc3\xe2\x41\x03\x57\x7c\x25\x2d\x0b\x42\xac\x4b\x58\x1d\x9e\xa3\x1c\xa6\x6f\x9d\x61\x2a\x55\x0e\x9f\x03\x64\x44\x1b\x3c\xd3\x0d\x63\xd6\x11\x89\x7b\x12\x31\x4d\xed\x55\x00\x7d\x59\xe9\xac\xb0\xb3\xb2\xb2\x37\xb7\xcc\x41\x9d\xb0\x3a\xe1\x64\x21\xa9\x20\x07\x55\x1b\x39\x76\xc5\x2b\xed\xce\xd9\xc7\x77\x8f\x4f\xcf\x1f\x5c\x25\x17\x64\xca\x2a\xeb\x6a\xf7\x52\xbb\x46\xd8\x14\x99\xb0\xa9\x6b\xe2\x6c\xac\xea\xbb\x22\x56\x72\xeb\xf9\xa0\x72\x0c\x23\x19\xb4\xed\xbc\x10\x6f\xda\x8f\x39\x1b\x33\x1e\xd9\x9d\x88\x3f\xb1\x1d\x3a\x58\xa7\xd1\x1e\x9d\x97\xfc\xe1\xf5\xc3\x9b\x48\xc1\x91\xd2\x79\xe2\xe9\x51\x14\x16\x3a\x95\xd5\xa2\xf7\x17\xc7\xa5\xca\xd5\xf7\xeb\x0f\xb5\x4a\xea\x83\x48\x7f\x33\x91\x96\x5d\x4b\x2c\x86\xe2\xd2\x7f\x0f\x25\x61\x6a\x9e\xa7\x4a\xc9\xdb\x7c\xdb\xc4\x96\xc1\x72\xce\x5e\xd8\x34\x75\xc4\x57\x7a\x37\xf6\xd5\xde\xb9\x3c\xd3\xc9\x67\xdb\x1b\xb9\x6f\x33\x71\x34\xff\x6c\x33\x6c\xb6\xef\xf6\xef\x17\x7a\xdf\xd3\x12\xfc\x8f\xd6\xf6\x0f\x69\xf3\x27\xbc\x4f\xfb\x9f\x26\x09\x32\x96\xa5\x19\x12\xd1\xbe\xdf\x3e\x8f\xbb\xad\xc2\xea\x10\xd7\x91\xdb\xd3\x4c\xa8\xa8\xd0\x7a\x3a\x44\x48\xfb\x84\xfe\xd0\xff\x0a\x00\x00\xff\xff\x08\xdd\xf1\x46\xcc\x06\x00\x00")

func schemaConfigurationsschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaConfigurationsschemaJson,
		"schema/configurationsSchema.json",
	)
}

func schemaConfigurationsschemaJson() (*asset, error) {
	bytes, err := schemaConfigurationsschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/configurationsSchema.json", size: 1740, mode: os.FileMode(420), modTime: time.Unix(1500496028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaEventhandlersschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x3d\x6f\xdb\x30\x10\xdd\xf3\x2b\x0e\x6a\xc7\xc6\x04\xda\xcd\x63\x83\xa2\xed\x94\x02\xed\x56\x04\x01\x25\x9d\x24\x06\x32\xa9\x1e\xcf\x31\x8c\xc2\xff\xbd\x10\x15\xcb\xfa\xa0\x44\x3a\x48\x3d\x78\xe0\x7d\xbd\x7b\x77\x7a\xe4\xdf\x1b\x00\x80\x04\x9f\x51\xf3\x63\x25\x75\x5e\x23\xd9\x64\x0b\xdd\xb9\xb3\xf1\xb1\xc1\x64\x0b\x89\x24\x92\xc7\xe4\xc3\xc5\x90\xa3\xcd\x48\x35\xac\x8c\x6e\xed\x5f\x25\xe3\x41\x1e\xe1\xdb\x39\xcb\xc0\x55\x31\xee\xc6\x69\x47\xa9\x4d\xfa\x84\x19\x0f\x02\x7c\xf9\xc7\x18\xc1\x1f\x43\xf8\x67\xaf\x08\xf3\x64\x0b\xbf\x47\x16\x67\xd5\x72\x87\xc9\xe8\xf8\x61\x56\xb3\x90\xfb\x9a\x67\x50\x2f\xe1\x5b\x48\x4a\xe4\xc7\x06\xf9\xd1\xee\xb3\x0c\xad\x3d\x63\x9a\x60\xf1\xf5\xd0\x71\x03\x5c\x21\x34\xc8\x20\x5d\xbc\x2f\x8e\xb0\x40\x42\x9d\x75\xf5\x14\x57\xfb\x74\x93\x99\x9d\xf8\xf5\xfd\xf3\xdd\xfd\x4f\x53\xf0\x41\x12\x8a\x9d\xb4\x55\xad\x74\x79\x5b\xab\x54\x14\xb5\x39\xb4\x7f\xa5\xd9\x3c\x59\xa3\x7d\x59\x1b\x49\xd2\x33\x87\xde\xbe\x27\xd5\xd6\x6b\x90\x2d\x1b\xc2\x8d\x3d\xc8\xb2\x44\xda\x28\x23\x9e\x3f\x8a\x06\x59\x7c\x4a\x66\x91\xa7\xd1\xc9\x69\x42\x68\x43\xa6\x41\x62\x85\xfe\xb2\x67\x4e\x17\x00\x9d\x17\xc4\x32\x29\x5d\x7a\x5a\x82\xf1\xd0\xae\x18\x0d\x2c\x8e\x87\x60\xbe\x27\x9e\xd6\x3c\x09\xde\xaa\x8b\xd8\x35\x59\xeb\x61\x78\x1c\xd5\x4a\x68\x39\x56\x3f\xd6\x10\x9a\x97\xe4\x0b\x41\x81\x25\xe9\xfd\xba\xfd\x5c\x76\x80\x68\xb6\x07\x78\x7b\xd6\x57\xd7\x3e\x98\x66\xa5\x6d\x68\x71\x2f\xc6\x9f\xbc\x16\xcf\x84\x5c\x21\x99\xe7\xaa\xad\x22\xeb\x1f\x91\xa4\x4d\xf8\xf0\x57\x8b\xda\x10\xa9\x8f\xf7\x85\x57\x59\xdb\xdf\x0a\x84\xa1\x9a\xfd\xaf\xe9\x05\x45\xd2\x09\xa4\x15\x77\x46\x5b\x53\xe3\x17\x22\x43\x2f\x63\x72\x96\x25\xd1\x9c\xd4\x9b\x5f\x49\xf0\xa2\x31\x70\xe9\xf2\x6d\x66\xbd\x42\x68\x8e\x85\xd2\x6a\x55\x75\x7a\xdf\xe9\x77\x3b\xb2\x46\xd3\xfb\x6a\x66\x9c\x14\xf5\x68\x03\x59\x56\xaf\xef\x79\x4d\xc9\x32\x90\x11\xfa\x3b\x26\xc2\x8f\xb0\x58\x1e\x1d\xcc\x5f\x0b\xb3\x04\x91\x3a\xd6\xfb\xbb\x06\x62\x3c\x9d\xf7\xfb\x16\xdf\x16\x92\x77\x62\xfc\x14\x12\x17\x7e\x45\xb0\x05\x58\xde\xb7\x51\x31\x95\xc7\x03\x8b\x51\x98\x6b\xeb\x77\xbd\xbe\x0e\x40\x38\x3d\x4c\xb6\xbb\x62\x6e\xec\x56\x88\x45\x11\x71\xef\xaa\xdb\xcc\x68\x26\x95\x8a\xb4\x36\x69\xab\x2b\x8c\x24\x64\xe6\x88\x77\xaf\xaf\xc1\x20\x6c\x56\xe1\x4e\x76\xa2\x12\x26\x64\xd5\x23\x40\xd7\xd2\x95\x50\xc8\xda\xe2\xb5\x4a\x34\x3b\x7d\x58\x7d\xdd\x45\x95\x1e\x04\x85\x03\x4e\x37\xa7\x7f\x01\x00\x00\xff\xff\xa8\x34\xae\x1d\x94\x0c\x00\x00")

func schemaEventhandlersschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaEventhandlersschemaJson,
		"schema/eventhandlersSchema.json",
	)
}

func schemaEventhandlersschemaJson() (*asset, error) {
	bytes, err := schemaEventhandlersschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/eventhandlersSchema.json", size: 3220, mode: os.FileMode(420), modTime: time.Unix(1500509479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaEventlinksschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xc1\x4e\xc3\x30\x0c\xbd\xef\x2b\x2c\x6b\x47\xbe\xa0\xd2\x8e\x08\x6e\x20\x71\xdc\xa6\x2a\xb4\x6e\x17\x28\x6d\x49\x3c\xd0\x34\xe5\xdf\xd1\xda\xb5\x6b\x1a\xaf\x1d\x07\x44\x8e\xb6\x9f\x9f\xed\x67\xe7\xb8\x00\x00\x40\xfa\xa2\x92\xe3\x42\x97\xef\x16\x23\x68\x8d\x8d\x83\x0f\x35\x61\x04\xa8\x8c\x51\x07\xbc\xbb\x38\x52\xb2\x89\xd1\x35\xeb\xaa\x3c\xf9\x1f\x14\xd3\xb7\x3a\x40\x93\x08\xda\x44\x83\x68\xcd\xf4\xe1\x67\xf6\xb2\x57\xaf\x6f\x94\xf0\x00\x20\x51\x0c\x52\xc3\x93\x08\x30\xf4\xb9\xd7\x86\x52\x8c\x60\xed\x79\x5a\x32\xa3\xf3\x9c\x8c\x1d\xa1\x5a\x2a\x6d\x6b\xc5\xc9\x8e\x2c\x7a\xce\x6d\x50\x52\xa6\xf6\x05\x07\x9d\xf8\x04\x11\xac\xd1\x90\xe5\xf8\x6c\xc1\xed\x34\xa5\x54\xee\xe9\x85\x1c\x3d\x5a\x67\x18\xe1\xf2\xe8\x84\x66\xfa\x98\x9d\x2a\xd3\x82\xcc\x69\x76\x39\x71\x5c\x13\xc7\x76\x9f\x24\x64\x6d\xdc\xb9\x44\xb0\x0b\xac\x5b\xcf\xe2\x46\x43\xa9\x4d\x55\x93\x61\x4d\xa1\xc2\x30\x9a\x8b\xdc\xd1\xd5\x2d\xf3\x82\x46\xeb\x70\x3f\x58\x87\x09\x69\xc1\x97\x0d\xc3\x96\xdd\x9c\x38\x7f\x54\x74\xc7\x71\x0d\x2a\xdf\x8c\x58\x82\x78\x3f\x5e\xe4\x8c\x46\x3e\x71\x36\x1b\xe3\xb1\x5b\x36\xba\xcc\x27\xd8\x7b\xc4\x0d\xd3\x00\x9d\x41\x52\x95\xa9\x6e\x82\x6e\xca\xd9\x6b\xbb\x3c\x9e\x17\x01\x56\x2b\xd8\xe0\x06\x9d\xbc\xe0\xdd\x13\x94\xf7\x52\x5f\x0e\xe8\xdf\xa6\xd1\x95\xf0\xbb\x41\xbc\xb4\x67\xfe\x38\x75\xe5\xdd\x0b\xaf\x7d\xda\x13\x5a\xdd\xe4\xef\xa0\xd2\x56\x4b\x55\x3c\x0f\x77\x30\x53\x85\xa5\x85\x00\x9a\x07\xb8\x85\xfb\x09\x00\x00\xff\xff\x41\x15\x55\xb0\xb7\x06\x00\x00")

func schemaEventlinksschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaEventlinksschemaJson,
		"schema/eventlinksSchema.json",
	)
}

func schemaEventlinksschemaJson() (*asset, error) {
	bytes, err := schemaEventlinksschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/eventlinksSchema.json", size: 1719, mode: os.FileMode(420), modTime: time.Unix(1500516147, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGateway_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x8e\xda\x30\x10\xbe\xf3\x14\x56\x76\x8f\x05\xf7\xd0\x13\xc7\xf6\xd4\xd3\x56\x6a\x6f\xd5\xaa\x32\xc9\x24\x98\x06\x3b\xb5\x87\x45\xa8\xda\x77\xaf\xe2\x84\x10\x83\xed\x84\x62\x10\x2b\xed\x25\x87\x99\xf1\xfc\xe5\x9b\xcf\x3f\x7f\x27\x84\x10\x92\x3c\xea\x74\x09\x6b\x96\xcc\x49\xb2\x44\xac\xe6\x94\xae\xb4\x14\xd3\x46\x3a\x93\xaa\xa0\x99\x62\x39\x4e\x3f\x7e\xa2\x8d\xec\x21\xf9\xd0\xac\xc4\x5d\x05\xf5\x32\xb9\x58\x41\x8a\x7b\x69\xa5\x64\x05\x0a\x39\xe8\x64\x4e\x9a\x18\x46\x5e\x30\x84\x2d\xdb\x59\x42\xbf\x9b\x4e\xab\xe0\xcf\x86\x2b\xc8\x92\x39\xf9\x69\x69\x8c\x56\xb0\x35\x1c\xad\x30\xf2\x17\x50\x9a\x4b\xe1\x52\xa5\x52\xe4\xbc\xd8\x28\x86\x5c\x0a\xed\xb2\x40\xc5\x8b\x02\x94\x53\x07\x2f\x20\xf0\xd7\x92\x89\xac\x0c\x5a\x94\x5c\xfc\xd6\x89\xa5\x7d\x3e\xaa\xcc\xd3\x28\xbb\x36\x97\x86\xf4\xbb\xa6\x51\x71\x51\x24\x27\x46\xaf\x81\xae\x44\x75\x9a\x81\x4e\x15\xaf\x30\xba\xe3\xa3\x1f\xe5\xf5\xcd\x11\xd6\x7e\xb5\x31\x79\x54\x90\xd7\xe1\x1f\x68\x06\x39\x17\xdc\x78\xa4\x56\x80\xd3\x9c\x3c\x79\x59\xf5\x30\xa5\xd8\x6e\x5c\x39\x47\xc8\x89\x5f\x8e\x15\xe0\x46\xe5\x34\x30\xbf\x56\x2d\xb5\xf7\xab\x17\xd2\x4d\x7b\xfc\x2a\x5a\xd7\x71\x4b\x98\x04\x9c\x24\x2c\xcb\x4c\x6c\x56\x7e\xeb\xb3\x4b\xce\x4a\x0d\x13\xdb\x45\xbb\x34\xe9\x25\x6c\x13\xb6\x3d\x1e\x37\xa1\x6d\xe3\xd3\x21\xd7\x80\xc8\x45\x71\x77\x84\xda\xae\x79\x0b\x6c\xda\xb5\x70\xd0\xab\xf3\x87\x76\x56\x1e\x84\x05\x66\x63\x28\x5b\x72\x82\xea\x53\xc9\xff\xe1\xfc\xb0\x68\x3f\xe5\xef\x30\x7e\x87\x31\x79\xc3\x30\xb6\xf7\xf8\xf8\x60\x0e\x02\x53\x0a\x78\xca\x9d\x8b\x3d\xbf\x22\x18\xb0\x67\x95\x83\x02\x91\x82\xbb\xa7\xcf\x63\x70\x71\x51\x02\x87\x1d\x70\x74\x06\x77\x36\xc0\x57\x1b\xb7\x8a\x29\x16\x38\xfb\xdc\xdb\xb0\x39\x2a\x38\xa0\x2b\x72\xc7\x3b\xcc\x5c\xd8\x9c\x91\x18\x65\xc8\x3c\x1e\x8c\x9e\x67\x21\x6d\x7d\x3a\x75\x43\xdb\x93\xd4\x00\x84\xed\xb4\x42\x16\xc4\xd1\x08\xaf\xb1\xe7\x48\x4c\xda\x02\x47\xc7\x09\xa1\x66\x28\x4e\x73\x90\x3f\x2f\x90\xdf\x1d\x69\xb1\xc2\x36\x25\xee\x5f\x58\xf4\x9c\xd2\x82\xe3\x72\xb3\x98\xa5\x72\x4d\x7f\x7c\xfd\xfc\xe5\xe9\xbb\xcc\x71\xcb\x14\xd0\xbc\x94\x85\x9c\xa6\x52\xa0\xe2\x0b\xba\x28\xe5\x82\xae\x99\x46\x50\x94\xa5\x35\xda\x6a\x83\x6d\xef\x92\xd1\xbe\xc9\xcc\x56\xda\xc7\x5e\xc4\x39\x2a\x81\x36\x8c\xdb\x95\xdc\xae\x23\x6d\x70\xe6\xe2\x17\x75\x77\x0b\xbd\xe9\x64\x5c\x57\x0c\xd3\x25\x5c\x78\x30\x1b\xbe\x49\xda\x77\x3b\x4f\xfb\x47\x5c\x37\xe3\xd1\x63\xaf\xf6\x9b\x65\x1d\xe4\x43\x32\x9a\x13\x8d\x65\xf0\xb9\x83\xf8\x19\x8e\x9c\xc1\x72\xc6\x96\x0f\xd3\x02\x39\x87\x83\x48\x98\x87\x48\xbf\xb8\xf8\x81\xcf\x65\x8a\xab\x8c\xfd\xa4\xf9\xbe\xfe\x0b\x00\x00\xff\xff\x93\x43\x4a\x84\x89\x16\x00\x00")

func schemaGateway_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaGateway_schemaJson,
		"schema/gateway_schema.json",
	)
}

func schemaGateway_schemaJson() (*asset, error) {
	bytes, err := schemaGateway_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/gateway_schema.json", size: 5769, mode: os.FileMode(420), modTime: time.Unix(1501277195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashlingjsonschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6b\xeb\x38\x14\x5d\x4f\x7f\x85\xf0\x14\xba\x69\xe3\x4c\x07\x06\x92\x65\xcb\xd0\xe9\x40\xa7\x03\xcd\xac\x86\x12\x14\xf9\xda\x56\x23\x4b\x7a\x92\xdc\x10\x42\xfe\xfb\x43\x4a\xec\xda\x8e\x3f\x93\xbe\xf2\x16\xf1\xaa\xe5\xde\x7b\x74\x3f\x8e\x8e\x14\x6d\x2e\x10\x42\xc8\xc3\x7c\xfd\x1c\x7a\x53\xf4\xbf\xfb\xd7\x7e\x9b\xfc\x2f\xe7\x60\xa8\x61\xe0\x4d\x91\xf7\xf7\xcb\xf3\x3f\x48\x93\x18\x12\x8c\x42\xa1\xd0\x13\xd6\x31\xa3\x3c\x42\x44\xf0\x90\x46\x28\xa4\x0c\xbc\xeb\x72\xf0\xe5\xce\xdf\x86\x57\x4d\x66\x2d\x1d\xac\x58\xbc\x01\x31\x55\x6b\x00\x21\x4e\x99\xf1\xa6\x68\xb3\xad\x98\xa4\x12\x12\x94\xa1\xa0\xad\xb5\x64\x73\xf6\x08\x1b\x58\xe1\x75\xad\xb1\x7b\xe5\xdc\x4b\xc1\xb7\x94\x2a\x08\x4a\xbd\x39\xf0\xe2\x38\xa9\x16\x5d\xb2\xbf\x83\xd2\x54\xf0\x36\x97\x5d\xfb\x52\x85\x0d\x15\x5c\xb7\x79\x1a\x45\xa3\x08\x54\xab\x0f\xbc\x03\x37\xf3\x18\xf3\x80\xf5\xf2\x64\x94\x2f\xb5\x57\xeb\xf5\xda\xd0\x99\x00\x34\x51\x54\xda\x74\x6d\x1b\x73\x1e\xec\x1b\x8f\xda\xfb\xda\x31\xbe\xdc\xcf\x75\xb6\xcd\x03\x95\x79\xe2\x05\x90\x08\x2c\x65\x4b\xc9\xbd\xb2\xef\x98\x28\x2a\x32\x48\x1b\x45\x79\x54\xdf\x3d\xfb\x6d\x7b\x30\x63\x48\x89\xbf\x8d\xc6\xa3\xf1\xa9\x05\x76\x53\xf2\xd3\x6a\x2c\xa7\xd2\xbf\xce\xa7\xf5\x87\xba\x60\x29\x19\x25\x6e\x73\xa0\x22\xde\x89\x5d\x18\x00\xf5\x19\x9d\xa8\x6c\xf2\xce\x66\x5c\x2a\xb0\xaa\x5c\x89\x7b\x71\x6a\x3a\x7a\xd3\x82\xff\xea\x57\x20\x8f\x4a\x2b\x57\x94\xde\x09\x65\x11\xa5\x54\x72\x98\xa3\x92\xa8\x48\x56\xef\x54\x5c\x5c\x16\x56\xca\xa7\x82\x78\x42\x56\x3b\x79\x1c\x96\x92\x8b\xa9\xc9\xa7\x45\x6a\x5d\x32\xb5\x96\x86\x14\x3d\x1c\x04\xd4\x0e\x1e\xb3\x7f\x8b\x82\x1a\x62\xa6\xe1\x20\xa2\x0c\x5d\x3d\x50\x7b\x41\x15\x82\x7e\xb6\x0b\xc2\x11\x57\x80\xfd\xe1\xd2\x71\x66\x14\x34\xba\x55\x7a\xab\x62\x33\x8b\xa9\x46\x54\x23\x13\x03\x0a\xa9\xd2\x06\x25\x94\x28\x91\x49\x4f\xcb\x82\x07\x32\xd1\x7c\xf5\xe8\x60\x64\x56\xe1\x12\x87\x4b\x7c\xef\x60\xfb\xea\x5c\x44\x4d\x9c\x2e\x46\x44\x24\xfe\x8a\x53\x12\x0b\xa6\x7d\x07\xa3\xd3\xc5\x40\xd9\xbd\x2f\xd6\xe3\x48\xe1\x80\x10\x61\xa9\x36\xa0\xba\xd0\x34\x18\x43\x79\xd4\xbd\x01\x9d\xf7\x9d\x12\x4b\x50\xff\x29\x66\x57\x66\x82\x60\x16\x0b\x6d\xa6\x93\xf1\xe4\xb6\x63\x21\x17\x9e\x6a\x50\xbb\xae\x55\xa9\x58\xeb\x2e\xb1\xd6\x2b\xa1\x02\xeb\xde\xea\x5d\xbf\xaf\x9b\x2d\x4d\xd7\xae\x82\x56\x9f\xcc\x0a\x05\xda\xcc\xf7\x80\x03\x47\x3a\x8b\x01\xed\x23\x91\xe0\xe8\x4a\x82\xd1\x57\x08\x78\x20\x05\xe5\x4d\xb7\xbe\x8f\x22\x0e\x39\x36\x7b\xbc\xbb\x7f\x7e\x11\xa1\x59\x61\x05\x7e\xc8\x44\x24\x6e\x88\xe0\x46\xd1\x45\x76\xb0\xf8\x36\xdf\x4f\x25\x0b\xf2\xa4\x50\xee\xae\x31\x19\x4f\xfe\xf0\xae\x2f\x7e\xb1\x5f\xd9\x23\x01\x13\x0b\x7b\xff\xf7\x1e\xfe\x9c\xd5\xbb\x48\x6c\x62\xeb\xe0\xdb\x2e\xf8\x53\x09\xe6\x31\xf8\x1a\x36\x1c\x1c\x9a\x27\x73\x22\x02\x33\x97\x60\xe6\x3a\x25\x04\xb4\xce\xb0\x07\xd2\xe3\x2f\x17\xe5\xa4\x4f\x82\x41\xd8\x61\x75\x61\x28\x08\x41\x01\x27\xed\xd4\x48\xf6\xe7\xc9\x0d\xa3\x0b\xcb\x93\xd5\x8e\x2c\xee\x8c\xed\x5a\x41\x62\x85\x93\x9e\x3a\x92\x2a\x6a\xf3\xb0\x23\x35\x42\xc1\x48\xaf\xb0\x25\xe1\x88\x0a\xff\xfd\xd6\x4e\xda\xff\xfd\x2b\x67\x9c\x5d\x41\x8e\x1e\x70\x51\x38\xca\x3b\xbf\x61\xe1\x3c\x32\xa0\x5a\x62\x43\x62\x68\x5f\xbf\x5f\x1e\x39\x2a\x0d\xbd\xa9\x77\xb9\xd9\xf6\x50\x59\xe7\x9f\x11\xb1\x85\xa3\x9d\x40\xcd\x23\xb1\xdf\xeb\xd0\x81\x0d\xbc\x61\x7d\xd1\x93\xc5\x69\x3f\xcc\xcf\x0f\x1e\x4d\xfb\xf0\x87\x3d\x59\x9c\xdf\x2a\x1a\x0a\x7c\x38\xbf\x55\x14\xba\x70\x7e\xab\x38\xbf\x55\x9c\xdf\x2a\xfa\x43\xed\x20\x5e\x2f\xb6\xdf\x03\x00\x00\xff\xff\xf3\xe6\xd4\x81\xe4\x18\x00\x00")

func schemaMashlingjsonschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashlingjsonschemaJson,
		"schema/mashlingJsonSchema.json",
	)
}

func schemaMashlingjsonschemaJson() (*asset, error) {
	bytes, err := schemaMashlingjsonschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashlingJsonSchema.json", size: 6372, mode: os.FileMode(420), modTime: time.Unix(1500061437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTriggersschemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x3f\x6f\xa3\x40\x10\xc5\x6b\xfc\x29\x46\xd3\xb8\xe1\x8e\x9e\xf2\xae\x88\x52\x39\x52\xdc\x45\x51\xb4\xc0\x80\x37\xc6\x2c\x99\x1d\x64\x59\x11\xdf\x3d\x32\xb0\x0e\xff\x1c\xe4\xc8\x0d\x92\x77\xe6\xbd\x9d\xdf\xf3\xec\xe7\x0a\x00\x00\x85\x75\x96\x11\x5b\x0c\xa1\x3d\x69\x4f\x4f\x25\x61\x08\xa8\x98\xd5\x09\xfd\xef\x42\x42\x36\x66\x5d\x8a\x36\xc5\xb9\xfe\xa0\x84\x8e\xea\x04\x5b\xe7\xd2\x6b\xd5\x42\x87\xa1\xed\xc0\xda\x44\xef\x14\x4b\x4f\x30\xe7\xef\x7c\x61\x33\xdb\xcd\xf4\x51\x69\xa6\x04\x43\x78\xc1\x42\x1d\x08\xfd\xee\x02\x1f\xd0\x92\x88\x2e\x32\x8b\xaf\x93\x3b\x52\x55\xe5\xd2\x8c\xe6\x79\x9e\xd7\x2a\x43\xc0\xbd\x4a\xf7\xea\xad\x4b\x04\xfd\xb6\x38\x9e\x68\x47\xd0\x75\x80\x29\x40\x41\x23\x02\x31\xa5\x8e\x9d\xc4\x21\x66\x5a\x76\x55\xf4\x37\x36\x87\x60\xfb\xf8\xef\xff\xe6\xd9\xa4\x72\x54\x4c\x41\x9a\x9b\xcc\xfc\x89\x4d\x21\xac\xa3\xa0\xb3\x0b\x1a\x27\x5b\x45\xce\xe6\x02\xe0\x06\xf5\x9a\x6f\x7d\xfe\xd6\x23\xa6\x92\x4d\x49\x2c\x9a\xa6\x89\x37\xf5\x0e\x71\x5a\x19\x25\x82\xa3\x88\x17\xfe\x18\x68\x43\x9f\x97\xb8\x18\xac\xb0\x2e\x32\x9c\x34\xd5\x53\x9d\xd3\x2c\xcf\xf9\xfb\x6c\x6f\xc1\x6b\x77\xe9\x7e\x78\xc3\x6b\x96\x29\x47\xdb\xb6\x36\x9c\x10\xdb\xf5\x65\xdd\x6e\x61\xe9\x1f\xdf\x11\x69\xb0\xa5\x3f\xba\xce\xbe\xf8\xa5\xa9\x2f\xf6\x57\x64\x2a\x49\xf4\x59\xa3\xf2\xa7\xc1\x13\x98\xc0\x40\x3d\xc5\x59\xcd\xff\xea\x61\x5e\xf1\x4f\x55\x6e\x69\xd5\xaa\xea\xaf\x00\x00\x00\xff\xff\x39\xb5\x3c\xdf\x4a\x05\x00\x00")

func schemaTriggersschemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaTriggersschemaJson,
		"schema/triggersSchema.json",
	)
}

func schemaTriggersschemaJson() (*asset, error) {
	bytes, err := schemaTriggersschemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/triggersSchema.json", size: 1354, mode: os.FileMode(420), modTime: time.Unix(1500503518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/configurationsSchema.json": schemaConfigurationsschemaJson,
	"schema/eventhandlersSchema.json":  schemaEventhandlersschemaJson,
	"schema/eventlinksSchema.json":     schemaEventlinksschemaJson,
	"schema/gateway_schema.json":       schemaGateway_schemaJson,
	"schema/mashlingJsonSchema.json":   schemaMashlingjsonschemaJson,
	"schema/triggersSchema.json":       schemaTriggersschemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"configurationsSchema.json": &bintree{schemaConfigurationsschemaJson, map[string]*bintree{}},
		"eventhandlersSchema.json":  &bintree{schemaEventhandlersschemaJson, map[string]*bintree{}},
		"eventlinksSchema.json":     &bintree{schemaEventlinksschemaJson, map[string]*bintree{}},
		"gateway_schema.json":       &bintree{schemaGateway_schemaJson, map[string]*bintree{}},
		"mashlingJsonSchema.json":   &bintree{schemaMashlingjsonschemaJson, map[string]*bintree{}},
		"triggersSchema.json":       &bintree{schemaTriggersschemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
