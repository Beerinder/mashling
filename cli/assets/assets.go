// Code generated by go-bindata.
// sources:
// schema/gateway_schema.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGateway_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x8f\xda\x30\x10\xbd\xaf\xb4\xff\xc1\xca\xee\xb1\xe0\x1e\x7a\xe2\xd8\x9e\x7a\xda\x4a\xed\xad\xaa\x56\x43\x32\x09\xa6\x89\x9d\xda\x66\x11\xaa\xf8\xef\x55\x4c\x08\x71\xd6\x76\x42\x49\x10\x2b\x2d\x27\xe4\x19\x3f\xcf\x4c\xde\x3c\x7f\xfc\xbd\xbf\x23\x84\x90\xe8\x51\xc5\x2b\x2c\x20\x5a\x90\x68\xa5\x75\xb9\xa0\x74\xad\x04\x9f\x1d\x46\xe7\x42\x66\x34\x91\x90\xea\xd9\xc7\x4f\xf4\x30\xf6\x10\x7d\xa8\xa7\xea\x5d\x89\xd5\x3c\xb1\x5c\x63\xac\x9b\xe1\x52\x8a\x12\xa5\x66\xa8\xa2\x05\xa9\x97\x31\x86\x0c\x34\x6e\x61\x67\x8f\x06\x90\x1a\xb3\xc4\x3f\x1b\x26\x31\x89\x16\xe4\xa7\x6d\x32\x66\x0e\x05\x76\xe7\x18\xc3\x0b\x4a\xc5\x04\x77\xda\x62\xc1\x53\x96\x6d\x24\x68\x26\xb8\x72\xba\x68\xc9\xb2\x0c\xa5\xdb\x88\x2f\xc8\xf5\xf3\x0a\x78\x92\x87\x5d\x72\xc6\x7f\xab\xc8\x36\xff\xea\x66\xe8\xab\x99\x9d\xa3\xd3\x44\xda\x05\x54\x5a\x32\x9e\x45\xaf\xbd\xf6\xa1\xfa\x8c\x8d\x9b\x30\x55\xe6\xb0\x7b\x9e\x24\xe8\x23\x38\x2b\x20\x9b\x00\x1d\x55\x2c\x59\xa9\xa7\x28\x4b\x87\x72\x7e\x78\xa6\xb1\x08\xd8\x8d\xcf\xa3\xc4\xb4\x0a\xe1\x81\x26\x98\x32\xce\x0c\x26\xb5\x96\x70\xc4\xe5\x8b\xcd\xca\x0a\xa4\x84\xdd\xd0\xa4\x3a\x7d\x30\x45\x52\xd6\x12\x57\x4c\xea\xd0\xb9\xd3\x65\x54\xe1\x5f\x25\x9d\x46\xc8\xa6\xc8\xa5\x06\x1f\x3d\x11\x7b\xa8\x8b\x13\x41\x92\x98\x00\x20\xff\xd6\xd6\xce\x14\x72\x85\x27\xd7\x1a\xe5\x38\x3b\x6a\x05\xde\xd9\x9c\xec\xce\xb9\xda\x16\x65\x60\x5d\x06\x85\x5a\x33\x9e\xdd\xe8\xce\x51\xcf\x7a\x3b\xda\xdb\x94\xb3\x1f\xd8\xfd\x85\x1b\x37\x0f\xf1\x42\x8d\xd3\x1b\x32\x79\x4d\x78\xc7\xd0\xff\xf6\x40\x6b\xda\x51\x0a\xde\x09\x7e\xfa\xbd\x13\xdc\x76\x7b\xdb\x04\xb7\x0f\x0b\x93\xd0\xbc\x87\xb0\x82\xe3\x53\xea\x9e\xef\xfb\x32\xe1\x55\x5b\x6e\x29\x4a\xe4\x71\x37\x84\x26\x94\x61\x5c\xb9\x30\x8a\xd3\x1e\x7a\x46\x18\x37\xd9\xe4\x53\xf6\x63\x09\x12\x42\x27\xaa\x5b\xec\x46\x57\x1e\x27\xce\x8d\x5f\xfd\x86\x47\x17\x57\x69\x28\x75\x41\x83\x0f\xc3\x38\xb0\x24\x68\xae\x0e\xc0\x1e\xce\xfb\x22\xeb\x63\xb6\x1d\x5b\xd0\x85\x38\x0a\xe2\xf7\xf6\x9d\xbc\x49\x9d\xe7\xf0\xa5\x82\x3c\xea\x5d\xea\x70\x69\x38\x73\xad\x00\x20\xa9\xb9\x03\x9b\x5c\x1f\x5f\xad\xd4\x82\xd2\x8c\xe9\xd5\x66\x39\x8f\x45\x41\x7f\x7c\xfd\xfc\xe5\xe9\xbb\x48\xf5\x16\x24\xd2\x34\x17\x99\x98\xc5\x82\x6b\xc9\x96\x74\x99\x8b\x25\x2d\x40\x69\x94\x14\xe2\x8a\x7d\x95\xc3\xb6\x75\xa5\xa9\xdf\xb9\xe6\x6b\xe5\x55\x38\xe2\x6e\xa0\x50\x2d\x06\xee\x65\x1e\xf4\xf1\x76\x46\x73\xe9\x1c\x7b\x5b\x0c\xbe\x94\x25\x4c\x95\xa0\xe3\x15\x5e\x7e\xd4\x1b\x70\x91\xb5\xef\x95\xbe\x8f\x31\xe4\xba\x3b\xaa\x8c\xb6\x8a\x70\xcd\xd8\xc3\xb2\x49\x86\x4b\xa7\x71\x0d\x3f\xc1\x90\x80\x0c\x92\x73\xa4\xd0\x38\xb3\x01\xaa\x41\xce\x52\x29\xd2\xa3\x54\xa4\x9d\xe2\x14\x6b\x9f\xaf\x25\x93\xe9\xc2\xe1\xef\xfe\xfe\x6e\x7f\x7f\xf7\x2f\x00\x00\xff\xff\x0e\xb4\xa9\xdf\x0a\x18\x00\x00")

func schemaGateway_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaGateway_schemaJson,
		"schema/gateway_schema.json",
	)
}

func schemaGateway_schemaJson() (*asset, error) {
	bytes, err := schemaGateway_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/gateway_schema.json", size: 6154, mode: os.FileMode(438), modTime: time.Unix(1505304916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/gateway_schema.json": schemaGateway_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"gateway_schema.json": &bintree{schemaGateway_schemaJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

