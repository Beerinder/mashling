// Code generated by go-bindata.
// sources:
// cli/assets/banner.txt
// cli/assets/defGopkg.lock
// cli/assets/defGopkg.toml
// cli/schema/mashling_schema-0.2.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsBannerTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\xbd\x8e\xe4\x30\x08\xc7\xeb\xcd\x53\xd0\x31\x2b\x1f\xd0\xf3\x2c\x23\xd1\x5c\xef\xc2\xad\x1f\xfe\xf4\xf7\x47\x26\x9b\x71\x32\xb7\x24\x8a\x12\xec\x1f\x60\x0c\x0e\xed\xc2\xcc\xac\x6e\xc6\xdb\x4b\x65\x5d\xa4\xab\x14\xef\xee\xb8\xcd\x36\x22\x55\x15\x1f\x02\x25\xa6\xf9\x40\xa0\x70\x17\x31\xdd\x88\x45\xa4\x4f\x34\x53\x18\x32\xdf\x48\xfa\x34\x8c\x08\x0f\x65\x37\x37\x26\x51\x57\xd2\x47\x61\xde\xc4\x4d\x94\x99\xe9\x57\xa0\x9a\x63\xb1\xea\xc6\x47\xb5\xc9\xd1\xb8\x8f\xf0\x4e\x3e\x1d\x6b\x20\x62\x39\x04\x4b\xfc\x03\xc5\xa0\x2d\xe0\x81\xc2\xb1\xf3\x2b\x16\x79\xf3\x60\xd7\x28\xb1\x39\xb7\x2d\x63\x96\x33\xba\xb0\x86\xad\xd4\x6d\x8f\xcb\x05\x89\x17\x11\xf3\xb7\xf8\xd8\x91\x49\x55\x9d\x09\x95\xb9\xff\x67\x83\x3f\xd2\x86\xda\x49\x2f\xe9\x95\x62\x0b\x90\x52\x29\x3b\xa9\x9e\x52\x4e\x0b\x71\xe5\x15\xcb\x80\xc7\x12\x73\x32\x5b\xa1\xf0\x2e\x4b\x9a\x34\x97\xec\x88\x3d\xe7\x24\x9a\xfd\xc4\xbb\x58\xb2\xce\x2f\x71\xd2\x52\x92\x70\xca\x19\x73\x45\xce\x21\x6b\x32\x49\x77\x3c\x79\x29\xa9\xe1\xcb\x35\x63\x43\x46\xf6\xf4\xc2\x00\x59\xc9\xf9\xca\xc0\x31\xfd\x57\x11\x10\xe7\xf2\xd9\x80\xdd\x44\x80\x2c\x5c\x1b\xb0\x69\xc0\x2f\x79\xb2\x52\x96\x3c\x4e\x84\x69\xe5\x06\xe7\x95\x7f\x7b\x15\x83\xdd\xac\x7e\xec\x81\x5c\x56\x8e\x5d\xd5\xce\xee\x3b\x39\x3a\xfb\xf7\x28\xb6\x2e\x69\x6b\x15\x39\x44\xdb\x5a\xe5\x3a\xd9\xa3\xea\x66\x9f\x32\xab\xb8\x8d\x22\x45\x87\xde\x81\xd8\xea\x56\x55\xaa\xad\xa1\x75\x96\x97\xab\xe2\xf0\xb9\x63\xd1\xa6\x49\xfa\x7f\xa1\xb1\x36\x52\x8e\xde\x55\xbb\x67\xbd\x94\x7c\x3c\xbd\xfc\xef\x58\xa9\xb0\xde\xaf\xb5\x15\x57\x3a\x1c\x2c\x9c\xd4\x7a\x65\x58\xb2\x0f\x21\x53\x1e\x31\x1f\x44\xe6\x0f\x49\x94\x91\x88\x7b\x03\xd6\x9c\x63\xc9\xfd\x68\x45\xce\x54\x01\x8b\xa8\x2b\x7e\x56\x2a\x3c\xe5\xde\x16\x1b\xfc\x9d\xc5\x17\xba\x2e\x1f\x83\x9b\x7b\xd1\x2c\xc8\xca\xf8\xae\x96\x7e\x7c\xf3\xb6\x7d\x7d\x7d\x2d\x4d\xc5\x78\xc6\x59\x7f\x45\x54\xaa\xed\xf9\x88\xef\x1f\xfa\x47\x7c\x37\x24\x28\x70\xc3\x1e\x5e\xf0\x5a\xa9\x46\x00\xec\xdf\x73\xa4\x39\x8f\x68\x9e\x2a\x71\x10\x53\xd0\x93\x8c\x82\xf1\x88\xa6\x7b\xd6\xe6\x91\xf7\x91\xf6\x6d\x98\xd9\xb9\xd7\xf5\x88\x4a\xcf\xc0\xc4\x7a\xba\x1e\x2d\x84\x3a\xa2\xae\x0d\x9c\xaa\xa8\xcf\x88\x3f\x51\x23\xc2\xfa\x77\xbf\xe6\x08\x90\xf6\x16\x76\x99\xc4\xf7\xac\x86\x75\x37\xff\x35\xbb\xf9\xde\xfe\x05\x00\x00\xff\xff\x37\x0c\xc8\x3c\x83\x09\x00\x00")

func assetsBannerTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsBannerTxt,
		"assets/banner.txt",
	)
}

func assetsBannerTxt() (*asset, error) {
	bytes, err := assetsBannerTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/banner.txt", size: 2435, mode: os.FileMode(420), modTime: time.Unix(1509459414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgLock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x3d\x73\xdb\x48\xd2\xce\xfd\x2b\x50\x7a\x83\x4d\x56\xc2\x7c\x7f\xd4\x5b\x9b\xdc\x25\x77\xd1\x05\xbb\xd9\xd6\x96\xab\xbb\xa7\x07\x84\x0d\x02\xb8\x01\x28\x4b\xfe\xf5\x57\x20\x25\x92\x12\x61\x1b\xeb\x48\x9a\x9e\x26\xe6\x99\xfe\x7a\x7a\xfa\xff\xaa\x3f\x76\xed\x54\xe5\xb6\xe3\xaa\x9d\x2a\x38\xcc\x43\xc3\x3d\x17\x98\x39\xfd\x5a\xa5\xa1\xea\x87\xb9\xe2\xd4\xce\xff\x5f\xd1\x0e\xfa\x86\xa7\x6a\x0f\xcf\x15\x72\x75\xe8\xd3\xd0\x73\x85\xcf\xd5\xbc\xe3\xaa\xe7\xa7\xb9\xfa\x25\xf1\x58\x71\x3f\x1d\x0a\xff\xf2\xf0\xe1\xc3\x87\x3f\xff\x1c\xcb\xf0\x89\x69\x9e\xfe\xfa\xeb\x43\x55\x61\x81\x9e\x76\xd5\x6f\xd5\xdd\x1e\xa6\x99\xcb\xdd\x87\xaa\xea\x61\xcf\x8b\xa4\x69\xe7\xdd\x01\x1f\x68\xd8\xd7\x9f\x38\xe7\xc2\xcf\x38\x7c\xe5\xcf\xf5\xa7\x69\xe8\x47\x98\x77\x8b\xee\x08\xf4\x19\x16\x04\xbf\x55\x7f\xde\x3d\xdc\x2d\x9f\x2c\xfc\xd8\x4e\xed\xd0\x2f\x9f\x40\xa7\x65\x76\x52\x29\x0b\xc1\x25\x61\xb5\xcb\x59\xb9\x64\xb5\xc0\x14\xa4\x44\x08\x3a\x59\x87\xee\xee\x06\xd8\x0a\x88\xdf\x77\xc3\xd8\xe6\xe7\x7a\x82\x02\x7b\xd8\x70\x7a\x96\xd1\x69\x2d\x94\x96\x1c\x9c\xa7\x20\xbc\xf6\x26\x78\x4e\x64\x48\x5b\xa9\x50\x1a\x2d\xad\x8a\xdb\x4e\x6f\xcb\x61\x9c\xb8\xaf\xbb\xa1\x29\x87\x69\xc3\xf1\xc9\x05\xa5\xa4\x0e\x26\x70\x72\x81\x04\x28\x27\x08\xb4\x4f\x2e\x25\x0b\xc4\xc1\x28\x9d\x2d\x1e\x6f\xf2\xc8\xe5\xf5\x67\x8f\xf2\x41\x3c\x98\x4d\x98\xfe\xf8\xf7\x3f\xfe\xf9\x9f\xdf\x87\x3c\x7f\x81\xc2\x75\xee\x86\x66\xb8\xa7\xae\x7d\x8f\xed\x43\x55\x55\xd5\x1d\xf7\x8f\x77\xbf\x9e\xfe\x3d\xcc\x6d\xb7\x28\xdd\xb8\x4b\x07\xa7\x41\x8b\x10\x43\x08\xca\x83\x92\x41\x3a\x11\x9c\x24\x9d\x15\x27\xef\x31\x80\x45\xc9\x3f\x0f\x6e\xe8\xe7\xd2\xe2\x3a\x40\xa0\xb9\x1d\xfa\x45\xf3\xcb\x2b\xd0\x2b\x51\x9d\x38\xb7\x7d\xbb\xac\xd7\x76\xf9\x69\xe6\x7e\xfa\xc6\x66\xdb\x4f\x33\xf4\xc4\x6b\x7b\xfb\x21\x71\xb7\xb6\x31\x96\xe1\xb1\x4d\x5c\xd6\xf6\x26\x2a\xed\x38\xd7\xb9\x69\x86\x69\x75\x9f\xcb\x63\xbb\x7e\xde\x74\x18\xc7\xa1\xcc\x6b\x5b\x33\x1f\x53\xf0\x6a\xe7\xb1\x9d\x9f\x97\x80\xbb\x91\x15\x1e\xbb\xe7\x15\xe9\x74\xfe\xf0\xf1\x5e\xf5\xd4\xee\xc7\xee\x8c\x63\x2e\x6d\xd3\x70\x39\xea\xd5\x34\x94\x69\x2d\x08\xb2\x4e\xc6\x27\x41\x3e\x5a\x93\x98\xa4\xb5\x89\x84\xe0\x40\x4e\x9b\x90\x43\xcc\x00\x56\x08\x58\xc9\x9a\x8d\xc5\x64\x2d\x30\xba\x6f\x06\xc5\x38\xbe\xa2\xa7\xa1\xcf\x6d\x73\x59\x15\xae\x4f\xd6\xbb\x11\x2d\xc6\x78\x23\x4c\x30\xc3\x1b\xc1\x1e\xc6\xf1\x62\xea\xa3\xe8\xc5\x38\xaf\x32\xee\x9b\xb6\xe7\xb7\xab\xba\x1c\xfa\xfe\xa2\xd2\x0d\xd7\x3f\xf8\x56\x52\x29\x94\xd9\x13\xa3\x41\x26\x52\xa0\x31\xb1\xce\x6c\x39\x7a\x36\xe4\x00\xb4\x46\x45\x52\xe0\x4f\x24\xd5\x1e\xa6\x5d\xd7\xf6\xcd\x37\x12\xfe\x69\x3e\x59\xf7\x6c\x93\x7a\x5c\x94\x7f\x7d\xbf\xfd\x1a\x16\xcd\x50\xda\xae\x83\xfd\xe1\xe9\x9d\x2d\xba\x16\x6b\x1a\xfa\x74\xcc\xbe\xe9\x5a\xfa\xad\x4b\x6b\xa1\x8c\x8c\x19\x5d\xa6\x1c\xa3\xc3\x0c\x06\x50\x21\x59\x93\x84\xcc\xa8\x22\x28\x32\x52\xe5\x4d\x97\x86\x11\x68\xc7\xf5\xbc\x2b\x6d\x9e\x6f\x0a\xef\x02\x63\xb9\xc4\x69\xf7\x3d\x10\x01\xc1\x30\xb0\x4c\xa8\x02\x20\x5a\xd6\xcc\x5e\x0b\x0e\x19\x8c\x00\x69\x0d\x39\x96\x22\xfa\x4d\x40\x12\x3c\x32\x35\xbb\xba\x19\xee\xa7\x91\xbf\xdc\x40\x39\x0a\xdf\x23\x60\x4a\x0c\x48\xce\x9a\x68\x53\x56\x89\x29\xda\xe4\xc9\x80\x21\xcd\x42\xc9\x28\xb4\xd0\x96\xed\x4f\xe7\x13\xbf\xd8\xa7\x19\xee\x0b\x4f\x6d\xd7\x72\x4f\xcf\x37\xd8\xb0\x30\x7c\xe6\x72\x0b\x2f\x47\x00\xf0\x0c\x01\x93\x32\x26\x18\x15\x21\x4b\xf0\x9e\xb2\x91\xa8\x50\xa3\x36\x98\xd2\x0a\x45\xff\x7d\x78\x4f\x5c\x5a\xe8\xee\xa7\x1e\xc6\xf1\x16\xe1\x4a\xfb\x80\xd1\x5a\x16\x12\xa3\x36\x0e\x48\xc6\x44\x2a\x32\x4a\x67\x83\xa3\x28\x12\xa7\x18\x21\x06\xda\xe4\xbc\x57\x1c\xff\x3d\xf0\x81\x37\x1c\x6e\x0c\x51\x10\x96\xb2\xd4\x4a\x58\xb4\x36\xbb\xc8\xd2\x20\xa1\x8b\xc1\xf9\x24\x81\xa3\xca\x31\xdc\xd2\xb7\x7c\x10\x9b\x10\x2d\x75\x6f\x68\xf2\x7e\xae\x4f\x7f\x36\x80\xd2\x51\x00\xfa\xa8\x2d\xb3\x0a\x4c\x0e\x55\x70\xda\x19\x44\x88\x68\x52\x72\x46\x0a\x42\x9d\xec\x7b\x50\xe2\x41\x6f\x06\xd5\x0c\x0b\xf7\xcd\x03\x1e\xf2\x7a\x61\x69\x87\xd7\x12\x70\xd4\x5b\xcb\xff\x64\x52\x40\x1b\x33\x04\x0e\x52\xa9\x94\x42\x72\x51\x0b\x45\xc4\x31\xa3\xf2\x11\xc9\x09\xed\xc2\x46\x48\x1d\xf4\xcd\x0f\x40\x9d\xa0\x5c\xe3\xa2\xfb\x86\xfb\xfb\x66\xa8\x13\x9f\xf8\x7a\x38\x17\xb4\x71\x7e\x1e\x79\x7a\xbb\xaa\xa1\x7f\x7e\x27\x49\x87\x02\xd7\x04\xf3\x22\x9e\xdb\x3d\x4f\x33\xec\xc7\xb5\x9b\x4b\xb6\x11\xbd\x47\xab\x30\x07\x36\x68\x4c\x04\xeb\xd9\x65\x1f\xb3\x92\x6a\xe9\x7e\xbd\x0c\xe6\xe7\xd3\xfd\xc5\x1a\x9b\x93\xc8\x5a\x0d\xce\x48\xe3\x85\x89\x0e\x95\x56\x1e\x90\x60\x61\x1c\xed\x74\x74\x98\x62\x60\x63\x69\x5b\x17\xfc\x42\x11\x0b\x1b\xcc\xfc\xb4\x25\x62\x25\x83\xb2\x3a\xf8\x9c\x5d\x76\xc1\x04\x1d\x53\x50\xde\x79\x92\x5e\xeb\x9c\x4d\x32\x49\xda\x24\x56\xba\x60\xf9\xb7\x10\xed\x0f\x4f\x5b\x8c\x01\x68\x95\xcd\x26\xa3\x74\x3e\xb0\x8c\x1e\xd8\x46\x23\x24\x47\x61\x45\x06\x81\x8e\xd0\xe6\xf4\xd3\xde\xf9\x04\xe3\x82\xe9\xf7\x63\xc0\x6d\x00\x44\x00\x18\x85\x34\x16\x85\xd5\xde\x59\xed\x10\x01\xb5\x56\x5a\xaa\x6c\x82\x54\x52\xe9\x05\xe6\x26\x5b\x7c\x3a\x2c\xc5\x7f\xa2\xdd\xbe\x4d\x73\xbd\x9b\xe7\xb1\x0c\x87\x17\xac\x3f\xc0\xc1\x12\x63\x50\x01\x29\xb2\x8d\xc2\x20\x30\x09\xeb\x8f\x04\x29\x22\x81\x11\x99\x7d\x06\x5e\xa9\x21\x1b\x0d\xf3\xb9\x6c\xaf\x72\x18\x0c\x6b\x01\x94\xac\xb4\x00\x89\x0c\xfa\xa0\x21\x99\x9c\x83\x86\x9c\xb5\x8a\x11\x53\x5e\x03\xb3\x72\x70\xd7\x36\xbb\x79\x9a\x79\xbc\xfc\x77\x3f\x17\x20\x2e\xf7\xcd\xb0\x5e\x4b\x1e\x2e\x8d\x61\xd7\x31\xcd\x43\x19\xf1\xd2\xf5\xbc\x7c\xe4\xe3\x4b\xc7\xf1\x5e\x7e\x51\x3d\x29\x7c\x14\x1f\xe3\x47\x55\xbf\x6d\x53\xd6\x1e\x5f\xa0\x03\x02\xcb\x2c\x98\x24\x13\x47\x11\x55\xd2\x16\x91\x09\xd1\x44\xcf\xac\x8d\x21\xa4\xdb\xd2\x2e\xed\x5a\x6d\xdf\xe8\x97\x61\xe4\x7e\x31\x47\xdb\x37\xaf\xcf\xb3\x85\x98\x06\x5c\xde\x30\x9b\x42\x07\xac\xca\x4a\x1b\x65\x4c\x54\xc6\x25\x8b\x44\xca\x6b\x76\x96\x30\x51\x06\x9b\x7d\x72\xe4\xf4\x36\x96\xbe\x82\x53\x23\x4c\x2d\x6d\x75\xd5\x97\xb6\xf0\x9a\x59\x3d\xb2\x41\x24\x96\x41\x25\xad\xd9\x0a\x36\x16\x43\x4a\x31\x4a\x21\x0d\x45\xf0\x90\x01\xd2\xb6\x07\xf7\x35\xba\x6b\xc3\xfd\x10\xdd\x52\x2b\x2f\xaf\x86\x55\xde\xd0\x4e\x62\xa4\xe4\x04\xb2\x8f\x64\x48\x83\xcf\x10\x83\x91\xa8\x49\x6a\xc5\x46\x08\xe7\x60\x5b\x21\x58\xb0\x7d\x6d\xc7\xcf\x6d\x5f\x9f\xfe\xdc\x2f\x2e\xbd\x00\xfe\x01\xda\xdc\x41\xf3\x36\x88\xeb\x17\x2a\x5d\x88\x14\x79\x7d\xef\x74\xd2\xf2\x96\x3a\xef\x5f\xb3\xec\xb7\x1c\xa4\x15\x6b\x63\x13\x6a\x14\x08\x0a\x92\xc8\x19\x6d\x16\x9a\xd0\x98\xc0\x16\x74\x4c\x20\x44\xdc\x36\x23\x1a\x5b\x2e\x85\xa9\xee\xbe\x9a\x0d\x91\xab\x32\x25\x30\x84\x5e\xc8\x40\x2c\x2c\x28\x1b\x6d\x4c\x2a\xb3\x08\x14\x34\x6b\xad\x62\x96\x2e\x6e\xe2\xa6\x8d\xf9\xf6\x8a\xf0\xe9\xe9\x5f\x30\xdd\xce\xd0\x4e\x62\xad\x6e\xb3\x4c\x08\xe1\x50\x6a\xf2\x4a\x65\x9f\xa5\xd2\x2e\x90\x10\xa0\x93\x26\x05\x1c\x20\xc6\x08\x82\x36\x9a\xe9\x73\x53\x73\x29\x2f\x13\x80\x1f\x51\x43\x08\x32\x27\x1b\x92\x0f\x2c\x0c\x65\x97\x44\x62\xa9\xa4\xcf\xc1\x0b\x4f\x81\x48\x29\x13\x71\x5b\x7e\x17\x2a\xc3\x97\x8e\x9f\x97\x1a\xb3\xe7\xb9\xb4\xb4\x09\x82\x0c\x92\x45\xb4\x08\x1c\x8d\x0d\x4a\x3b\x6d\xb4\x91\xc6\x90\x93\x10\x9d\x5d\x58\xc1\xb1\xfd\x1e\x21\x1c\xbb\xa6\x87\xa1\x34\xf5\x53\x4d\xe5\x79\x9c\x6f\x52\xf6\x6e\x9a\x76\xf5\xcc\x65\xdf\xf6\xd0\xdd\x3e\x24\x33\x11\x2c\xcf\x23\x08\xc9\x1b\xcc\x29\x91\xa2\xe8\x40\x78\x8d\x49\x81\x49\x0a\x3c\x28\xfe\x5e\x47\x7b\x0d\xa1\xe7\x1b\x22\x3c\x4f\x39\xe6\xab\x6a\xb1\x90\xb8\x7a\xb3\xa8\x77\xcb\x8f\x5e\x45\x6d\xea\xcf\x93\x8d\xb6\x9f\xb9\xf4\xd0\x9d\x1a\x54\x2e\xed\x25\xf9\x3a\x7e\x3a\xf6\x03\x1d\x3f\x5d\x86\x41\x40\xab\x09\x99\x82\x73\x94\x49\x87\x48\x4c\x31\xd8\xe4\x72\x02\x15\x6c\x8c\xda\x81\xf5\x16\xac\x05\x0d\xdf\x1d\xda\x5e\xdf\x74\x7a\xbe\xf1\xf0\xcb\xc0\xa4\x6f\x9f\x2e\xc5\xa1\x4f\xc3\x97\xd5\x79\x54\xd0\x41\x48\x23\x03\xcb\xe5\x41\x81\x32\x04\xc1\xda\x2d\x3d\x80\x0d\x92\xd9\x1a\x0d\x59\x2b\x82\x8d\x70\xd6\xda\xd6\x0b\xd9\xc3\xcc\xd7\xdc\x0f\x33\xd7\x78\x68\xbb\x74\x63\xe2\x65\x77\x06\xbc\x91\x37\xdc\xdf\xba\xe3\x52\x4d\x2f\xb2\xd2\xf2\x9a\xee\x81\xce\x67\x2d\xa0\x0f\xd0\x9c\x01\x4d\x4c\x87\xc2\x35\xb6\xa9\x2d\x87\xeb\xa1\x1e\xf4\x53\x1e\xca\xfe\x3c\x88\xea\x5b\x1a\xd2\x49\xf1\xbd\x8c\xba\x54\xde\xcb\xfa\x95\xdf\x16\xe8\x1b\x9e\x01\xbb\xd5\x08\x61\x19\x81\xa5\x89\x2e\x06\x83\x92\x9c\xb5\x18\x84\x31\xe0\x2c\x09\xbd\xd4\x24\x0a\x3e\xa4\xa4\xbf\xe7\x92\xa1\xe9\xf8\xe1\xca\x33\x0d\xf7\xe7\xd7\xe4\xad\x6f\x4e\xfa\x30\xb6\x53\x0d\x63\x5b\x43\xdf\x0f\x33\xbc\x99\x46\x5d\x69\x94\x91\xea\x69\x86\xf9\xb0\x1a\x4f\x10\xa4\x90\x59\x49\xca\x31\x68\xf6\x5e\x27\x41\x52\x6a\xcd\x48\xd6\x28\xe3\xa3\x12\x42\x2b\xf9\xbd\x86\xe0\x16\x7c\x19\xe9\x07\x9c\x8a\xd0\x41\x4f\x97\x99\xda\xeb\x7a\xe9\x72\xf8\x46\x58\x86\x43\x9f\xca\x80\xed\xd5\x70\x33\x5d\xd2\x99\x86\xbe\xe7\xf7\x83\xce\xc2\x89\xfb\xb9\x85\x6e\xba\x4c\x2d\x69\x48\x57\x23\xbf\x05\x66\x87\x47\xb4\x1f\x3b\xfc\xf8\x28\xeb\x3d\x4f\xd3\x02\xf8\x8d\xc6\x70\x13\xae\xaf\xeb\xcf\xcc\x23\x74\xed\xe3\x19\xf0\x9e\x67\xb8\x1e\xae\xf6\xb0\xbf\x3a\x6f\xe4\xcb\x7d\x0b\x4f\x43\xf7\x78\xbb\xae\xd3\xc5\x87\x67\xd9\x08\xd3\x34\xef\xca\x70\x68\x76\xe7\xe8\x9f\x61\x9e\xae\x17\x87\xf3\x6a\x86\xf1\x4d\x32\x1c\xe7\xeb\x6b\x95\x44\x19\xa7\xa4\xd0\x49\x8a\x6c\xc8\x38\x65\xd8\xa2\x15\x20\x33\x2c\x0d\x2c\x6a\xa3\xd0\x39\xf5\x9d\xb0\x9d\x86\x43\x21\x6e\x0a\x8c\xbb\x23\x9b\x5d\xad\x6b\x18\xc7\xb4\xc2\xe8\xef\xc2\xe0\x9c\xe8\xc7\x76\xe8\x45\xf8\xae\x33\xbb\x99\xc8\x47\x30\x5a\x3b\x12\xca\x1a\xc5\x88\x19\x84\x24\xed\xa3\x89\x98\xbc\xb4\x2a\xa3\xc8\xce\xc6\x23\x01\x1f\x0d\xb8\x30\x2b\x2c\x5f\x81\x1e\xba\xe7\xaf\x5c\xee\x5f\x2f\x90\xf8\x38\xb4\x38\xcb\x2f\x5d\x8d\xfc\x50\x55\x6d\x3f\x1e\xe6\xe9\x3e\xb5\x0d\x4f\xf3\xa2\x1e\xbd\x15\x4e\xaa\x14\x10\x02\x29\x54\x69\xe9\x86\x3c\x06\xef\x11\xc8\x4a\x24\xcf\xd6\x4b\x0a\xe0\x32\x8b\x8c\x14\x65\xe6\x94\x82\x94\x29\x2a\x6d\x28\x2d\x67\x9d\x5c\x7a\x46\xd0\x8c\xd3\x3d\x25\xea\xae\xb6\xae\x41\xfc\x2f\x00\x00\xff\xff\x87\x6e\xa8\x6f\xfd\x1c\x00\x00")

func assetsDefgopkgLockBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgLock,
		"assets/defGopkg.lock",
	)
}

func assetsDefgopkgLock() (*asset, error) {
	bytes, err := assetsDefgopkgLockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.lock", size: 7421, mode: os.FileMode(420), modTime: time.Unix(1521825629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDefgopkgToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8e\x31\x8f\xd4\x30\x10\x85\xfb\xfc\x8a\x51\xd2\xb2\xf6\x71\xa2\x42\x4a\x41\x45\x4f\x05\x5a\x5d\xe1\xd8\x13\xc7\x24\xf6\x98\xf1\x78\x75\xfb\xef\x51\x92\x65\x59\xb1\x4a\x43\x13\x45\xcf\xef\x7d\xdf\x74\xf0\x95\xf2\xec\x95\x50\x5c\x00\xdf\x4d\xcc\x0b\x36\x5d\xd3\xc1\x37\x1c\x91\x41\x08\x26\x91\x5c\x3e\x6b\xed\x69\x31\xc9\x2b\x1f\x64\xaa\x83\x0a\xa4\x1d\x66\xed\xc8\x16\xfd\x97\xa0\x26\x89\x4b\xd3\xc1\x48\x0c\x0e\xc5\x84\x05\xdd\xa3\xc0\x91\xad\x11\x93\x18\x09\x94\xd4\xe6\x61\xfc\x55\x03\xa3\x83\x1e\xce\xed\x0d\x6e\x29\xea\x5a\x90\xb5\x4c\x21\x79\x6d\xa3\xdb\xff\xda\xb7\xa6\x83\xe0\x13\x1d\xf5\x33\xd3\x4f\xb4\xa2\xf3\xec\xbf\xb7\x1f\xa0\x1d\x82\x0c\xd5\xce\x28\x8a\xd8\x3f\x55\xbe\xac\x9f\x1f\x2b\xb4\xe9\xe0\x7c\xb6\x94\x8a\xb0\x09\x49\xde\x56\x0f\x40\x32\x11\xa1\x87\x23\x4b\xbb\x95\x2e\xc8\x25\x50\x5a\x7b\x1f\xd5\x8b\x7a\x69\xff\x93\xf6\xba\xe3\x06\x36\xc9\x4e\x6b\xcf\xe1\x65\x8f\x0a\x55\xb6\xff\x4e\xe3\x75\x24\x9e\x1f\xc7\x9b\x95\x2e\xc8\x1c\x1c\x1e\x3b\xdf\xf5\xf5\xe9\xf0\x57\xf5\xe9\x7e\x78\xe6\x9a\xf0\xb6\xa6\x74\xf2\x04\x3d\x8c\x66\x29\xb8\x45\x9e\x4e\x82\x45\x0a\xf4\x20\x5c\xf7\xac\xa6\x5a\xd0\x9d\xb2\xb1\xb3\xf1\x78\x7f\x6a\xfe\xa0\x9e\x57\x87\x9b\xdf\x01\x00\x00\xff\xff\x9d\x02\x1e\x28\x8e\x02\x00\x00")

func assetsDefgopkgTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefgopkgToml,
		"assets/defGopkg.toml",
	)
}

func assetsDefgopkgToml() (*asset, error) {
	bytes, err := assetsDefgopkgTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/defGopkg.toml", size: 654, mode: os.FileMode(420), modTime: time.Unix(1521493798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaMashling_schema02Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xcd\x6e\xdb\x30\x0c\xbe\xe7\x29\x04\xb7\xc7\xb6\xda\x61\xa7\x1c\xb7\xd3\x4e\x2d\xb0\xdd\x86\x22\x50\x6c\xda\x56\x66\x4b\x9e\xa4\x34\x08\x8a\xbc\xfb\x60\xf9\x27\x56\x22\xc9\xce\xa2\x04\x29\xd0\x1e\x7a\x20\x29\x92\x1f\xf3\x91\x94\xfc\x3e\x43\x08\xa1\xe8\x5e\xc6\x39\x94\x24\x9a\xa3\x28\x57\xaa\x9a\x63\xbc\x92\x9c\x3d\x36\xd2\x27\x2e\x32\x9c\x08\x92\xaa\xc7\x2f\x5f\x71\x23\xbb\x8b\x1e\x9a\x93\x6a\x5b\x41\x7d\x8c\x2f\x57\x10\xab\x4e\x2a\xe0\xef\x9a\x0a\x48\xa2\x39\xfa\xad\x25\x5a\x5a\x12\x99\x17\x94\x65\x8b\x36\xda\xc3\x5e\x95\x11\x05\x1b\xb2\x8d\xb4\xe4\xb5\xf5\x52\x09\x5e\x81\x50\x14\x64\x34\x47\xef\x6e\x3f\x43\xa5\x91\x94\x54\x82\xb2\x2c\xea\x95\x3b\x4b\x44\xe7\x61\x03\x51\xaf\xb5\x22\xeb\xb5\x8c\x94\x70\x70\x42\xcb\xdf\x40\x48\xca\x99\x4d\x15\x73\x96\xd2\x6c\x2d\x88\xa2\x9c\x49\x9b\x85\x12\x34\xcb\x40\x58\x75\xf0\x06\x4c\x2d\x72\xc2\x92\xc2\x6b\x51\x50\xf6\x47\x46\x86\xf6\xf5\x00\x99\xa3\xda\x26\x36\x9b\x06\xf9\x4a\xde\xfd\xed\x3c\x55\x09\xea\x34\xa1\xb2\x2a\xc8\x76\x11\x3e\xdd\xce\x33\x2d\x49\x16\xda\x35\xc8\x58\xd0\x4a\x05\xaf\xc6\x01\xbb\x9c\xbe\xa9\x82\xd2\xad\xd6\x26\xf7\x02\xd2\x3a\xfc\x1d\x4e\x20\xa5\x8c\x6a\x8f\xd8\x08\x70\x9c\x93\x23\x2f\x03\x0f\x11\xa2\xeb\xfc\x31\x38\x07\x74\x0f\x0f\xc7\x08\x70\x25\x38\x4d\x6f\x5e\x0a\x4b\xed\xfd\xe2\x40\xfa\x11\x15\x1e\x45\xeb\x3a\x2c\x84\x99\xc7\x49\x44\x92\x44\xc7\x26\xc5\xcb\x70\x24\xa6\xa4\x90\x30\x33\x5d\xb4\x47\xa3\x41\xc2\xe6\xaa\x32\xdb\xe3\x2a\xbb\x46\xfb\xb4\xc8\x25\x28\x45\x59\x76\x73\x5b\xa0\x3d\xf3\x11\xa6\x69\x5f\xc2\x51\xaf\xd6\x1f\xb4\xb7\x72\x30\xcc\xd3\x1b\x63\xd9\xa2\x23\x56\x1f\x4b\xfe\x8f\xe7\x83\x2b\x53\xd7\x8a\x9f\x34\xfe\xa4\xf1\x07\xa6\xb1\xb9\xe3\xc3\x93\xd9\x4b\x4c\xce\xe0\x39\xb5\x1e\x76\xfc\x14\xde\x80\x03\xab\x14\x04\xb0\x18\xec\x35\x7d\x9d\xc2\x8b\xb3\x12\xd8\x6f\xc0\xc9\x19\xdc\x58\x03\x5f\xac\xdd\x2a\x22\x88\xe7\xee\x73\x6b\xcd\x66\x41\xb0\x67\x57\xe0\x8a\xf7\x9c\x39\xb3\x38\x13\x39\x4a\x14\x71\x78\xd0\x7a\x9a\xf8\xb4\xf5\xed\xd4\x4e\x6d\x47\x52\x23\x14\x36\xd3\xf2\x59\x20\x4b\x21\x9c\xc6\x8e\x2b\x31\x6a\x01\x4e\x8e\xe3\x63\xcd\x58\x9c\xe6\x22\x7f\x5a\x20\xb7\x3b\xd4\x72\x85\xac\x0b\xd5\x7d\xa1\x92\x73\x8c\x33\xaa\xf2\xf5\xf2\x29\xe6\x25\xfe\xf5\xe3\xdb\xf7\xe7\x9f\x3c\x55\x1b\x22\x00\xa7\x05\xcf\xf8\x63\xcc\x99\x12\x74\x89\x97\x05\x5f\xe2\x92\x48\x05\x02\x93\xb8\x66\x5b\x6d\xb0\x19\x3c\x32\xda\x6f\x5a\x4f\x2b\xe9\x9a\x5e\xc8\xda\x2a\x9e\x32\x4c\xdb\x4a\x76\xd7\x81\x16\x9c\x7e\xf8\x05\xdd\x6e\xbe\x0f\x51\x09\x95\x15\x51\x71\x0e\x67\x5e\xcc\xc6\x5f\x92\xe6\xdb\xce\x51\xfe\x09\xcf\xcd\x70\xe3\x71\x80\xfd\x6a\x59\x7b\xe7\x21\x9a\x3c\x13\xb5\xa5\xf7\x73\x07\x72\x4f\x38\x74\xc2\x94\xd3\xb6\x74\x7c\x2c\xa0\x53\x66\x10\xf2\xcf\x21\x34\x04\x77\xf5\xc0\x94\x55\x6b\xf5\xe2\xdf\xfd\x96\xe0\xe3\xbf\x6c\x7f\xe0\xe4\x2b\x81\x2d\xdc\x14\xa8\xc8\x39\xfe\xc6\xb5\x8e\xb1\x79\x91\x19\x38\x6b\xfe\xef\x66\xff\x02\x00\x00\xff\xff\x96\x2a\x42\x06\xd7\x18\x00\x00")

func schemaMashling_schema02JsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaMashling_schema02Json,
		"schema/mashling_schema-0.2.json",
	)
}

func schemaMashling_schema02Json() (*asset, error) {
	bytes, err := schemaMashling_schema02JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/mashling_schema-0.2.json", size: 6359, mode: os.FileMode(420), modTime: time.Unix(1518456322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/banner.txt":               assetsBannerTxt,
	"assets/defGopkg.lock":            assetsDefgopkgLock,
	"assets/defGopkg.toml":            assetsDefgopkgToml,
	"schema/mashling_schema-0.2.json": schemaMashling_schema02Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"banner.txt":    &bintree{assetsBannerTxt, map[string]*bintree{}},
		"defGopkg.lock": &bintree{assetsDefgopkgLock, map[string]*bintree{}},
		"defGopkg.toml": &bintree{assetsDefgopkgToml, map[string]*bintree{}},
	}},
	"schema": &bintree{nil, map[string]*bintree{
		"mashling_schema-0.2.json": &bintree{schemaMashling_schema02Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
